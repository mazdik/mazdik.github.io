!function(t){function e(e){for(var i,o,n=e[0],a=e[1],h=0,l=[];h<n.length;h++)o=n[h],Object.prototype.hasOwnProperty.call(s,o)&&s[o]&&l.push(s[o][0]),s[o]=0;for(i in a)Object.prototype.hasOwnProperty.call(a,i)&&(t[i]=a[i]);for(r&&r(e);l.length;)l.shift()()}var i={},s={0:0};function o(e){if(i[e])return i[e].exports;var s=i[e]={i:e,l:!1,exports:{}};return t[e].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.e=function(t){var e=[],i=s[t];if(0!==i)if(i)e.push(i[2]);else{var n=new Promise((function(e,o){i=s[t]=[e,o]}));e.push(i[2]=n);var a,h=document.createElement("script");h.charset="utf-8",h.timeout=120,o.nc&&h.setAttribute("nonce",o.nc),h.src=function(t){return o.p+""+t+".bundle.js"}(t);var r=new Error;a=function(e){h.onerror=h.onload=null,clearTimeout(l);var i=s[t];if(0!==i){if(i){var o=e&&("load"===e.type?"missing":e.type),n=e&&e.target&&e.target.src;r.message="Loading chunk "+t+" failed.\n("+o+": "+n+")",r.name="ChunkLoadError",r.type=o,r.request=n,i[1](r)}s[t]=void 0}};var l=setTimeout((function(){a({type:"timeout",target:h})}),12e4);h.onerror=h.onload=a,document.head.appendChild(h)}return Promise.all(e)},o.m=t,o.c=i,o.d=function(t,e,i){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)o.d(i,s,function(e){return t[e]}.bind(null,s));return i},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o.oe=function(t){throw console.error(t),t};var n=window.webpackJsonp=window.webpackJsonp||[],a=n.push.bind(n);n.push=e,n=n.slice();for(var h=0;h<n.length;h++)e(n[h]);var r=a;o(o.s=6)}([function(t,e,i){"use strict";function s(t,e,i){(e=n(e,t.length-1))!==(i=n(i,t.length-1))&&t.splice(i,0,t.splice(e,1)[0])}function o(t,e,i,s){i=n(i,t.length-1),s=n(s,e.length),t.length&&e.splice(s,0,t.splice(i,1)[0])}function n(t,e){return Math.max(0,Math.min(t,e))}function a(t){return"touchstart"===t.type||"mousedown"===t.type&&0===t.button}function h(t){return"touchend"===t.type||"touchcancel"===t.type?t.changedTouches[0]:t.type.startsWith("touch")?t.targetTouches[0]:t}function r(t="body *"){return Array.from(document.querySelectorAll(t)).map(t=>parseFloat(window.getComputedStyle(t).zIndex)).filter(t=>!isNaN(t)).sort((t,e)=>t-e).pop()||0}var l;!function(t){t[t.BACKSPACE=8]="BACKSPACE",t[t.TAB=9]="TAB",t[t.ENTER=13]="ENTER",t[t.ESCAPE=27]="ESCAPE",t[t.SPACE=32]="SPACE",t[t.LEFT=37]="LEFT",t[t.UP=38]="UP",t[t.RIGHT=39]="RIGHT",t[t.DOWN=40]="DOWN",t[t.DELETE=46]="DELETE",t[t.KEY_F2=113]="KEY_F2"}(l||(l={})),i.d(e,"b",(function(){return s})),i.d(e,"c",(function(){return o})),i.d(e,"e",(function(){return a})),i.d(e,"d",(function(){return h})),i.d(e,"f",(function(){return r})),i.d(e,"a",(function(){return l}))},function(t,e,i){"use strict";var s=i(0);class o{constructor(t,e=!0,i=!0){this.element=t,this.dragX=e,this.dragY=i,this.globalListeners=new Map}start(t){this.onMousedown(t)}destroy(){this.removeEventListeners()}onMousedown(t){if(Object(s.e)(t)&&(this.dragX||this.dragY)){const e=Object(s.d)(t);this.initDrag(e.pageX,e.pageY),this.addEventListeners(t),this.element.dispatchEvent(new CustomEvent("dragStart",{detail:t}))}}onMousemove(t){const e=Object(s.d)(t);this.onDrag(e.pageX,e.pageY),this.element.dispatchEvent(new CustomEvent("dragMove",{detail:t}))}onMouseup(t){this.endDrag(),this.removeEventListeners(),this.element.dispatchEvent(new CustomEvent("dragEnd",{detail:t}))}addEventListeners(t){const e=t.type.startsWith("touch"),i=e?"touchmove":"mousemove",s=e?"touchend":"mouseup";this.globalListeners.set(i,{handler:this.onMousemove.bind(this),options:!1}).set(s,{handler:this.onMouseup.bind(this),options:!1}),this.globalListeners.forEach((t,e)=>{window.document.addEventListener(e,t.handler,t.options)})}removeEventListeners(){this.globalListeners.forEach((t,e)=>{window.document.removeEventListener(e,t.handler,t.options)})}initDrag(t,e){this.isDragging=!0,this.lastPageX=t,this.lastPageY=e,this.element.classList.add("dragging")}onDrag(t,e){if(this.isDragging){const i=t-this.lastPageX,s=e-this.lastPageY,o=this.element.getBoundingClientRect();this.element.style.left=o.left+i+"px",this.element.style.top=o.top+s+"px",this.lastPageX=t,this.lastPageY=e}}endDrag(){this.isDragging=!1,this.element.classList.remove("dragging")}}i.d(e,"a",(function(){return o}))},function(t,e,i){"use strict";var s=i(0);class o{constructor(t,e=!0,i=!0,s=!0,o=!1){this.element=t,this.south=e,this.east=i,this.southEast=s,this.ghost=o,this.startListeners=new Map,this.globalListeners=new Map,this.viewInit()}viewInit(){this.south&&this.createHandle("resize-handle-s"),this.east&&this.createHandle("resize-handle-e"),this.southEast&&this.createHandle("resize-handle-se");const t=window.getComputedStyle(this.element);this.minWidth=parseFloat(t.minWidth),this.maxWidth=parseFloat(t.maxWidth),this.minHeight=parseFloat(t.minHeight),this.maxHeight=parseFloat(t.maxHeight)}destroy(){this.removeEventListeners()}addEventListeners(){this.startListeners.set("mousedown",{handler:this.onMousedown.bind(this),options:!1}).set("touchstart",{handler:this.onMousedown.bind(this),options:!1}),this.startListeners.forEach((t,e)=>{this.element.addEventListener(e,t.handler,t.options)})}removeEventListeners(){this.startListeners.forEach((t,e)=>{this.element.removeEventListener(e,t.handler,t.options)})}onMousedown(t){if(!Object(s.e)(t))return;const e=t.target.classList,i=e.contains("resize-handle-s"),o=e.contains("resize-handle-e"),n=e.contains("resize-handle-se"),a=Object(s.d)(t),h=this.element.clientWidth,r=this.element.clientHeight,l=a.screenX,d=a.screenY,c=t.type.startsWith("touch"),m=c?"touchmove":"mousemove",u=c?"touchend":"mouseup";(i||o||n)&&(this.initResize(t,i,o,n),this.globalListeners.set(m,{handler:this.onMove.bind(this,h,r,l,d),options:!1}).set(u,{handler:this.onMouseup.bind(this),options:!1}),this.globalListeners.forEach((t,e)=>{window.document.addEventListener(e,t.handler,t.options)}))}onMove(t,e,i,o,n){const a=Object(s.d)(n),h=a.screenX-i,r=a.screenY-o;this.newWidth=t+h,this.newHeight=e+r,this.resizeWidth(a),this.resizeHeight(a)}onMouseup(t){this.endResize(t),this.globalListeners.forEach((t,e)=>{window.document.removeEventListener(e,t.handler,t.options)})}createHandle(t){const e=document.createElement("span");e.className=t,this.element.appendChild(e)}initResize(t,e,i,s){e&&(this.resizingS=!0),i&&(this.resizingE=!0),s&&(this.resizingSE=!0),this.element.classList.add("resizing"),this.newWidth=this.element.clientWidth,this.newHeight=this.element.clientHeight,t.stopPropagation(),this.element.dispatchEvent(new CustomEvent("resizeBegin"))}endResize(t){this.resizingS=!1,this.resizingE=!1,this.resizingSE=!1,this.element.classList.remove("resizing");const e={event:Object(s.d)(t),width:this.newWidth,height:this.newHeight};this.element.dispatchEvent(new CustomEvent("resizeEnd",{detail:e}))}resizeWidth(t){const e=!this.minWidth||this.newWidth>=this.minWidth,i=!this.maxWidth||this.newWidth<=this.maxWidth;if((this.resizingSE||this.resizingE)&&e&&i){this.ghost||(this.element.style.width=`${this.newWidth}px`);const e={event:t,width:this.newWidth,height:this.newHeight,direction:"horizontal"};this.element.dispatchEvent(new CustomEvent("resizing",{detail:e}))}}resizeHeight(t){const e=!this.minHeight||this.newHeight>=this.minHeight,i=!this.maxHeight||this.newHeight<=this.maxHeight;if((this.resizingSE||this.resizingS)&&e&&i){this.ghost||(this.element.style.height=`${this.newHeight}px`);const e={event:t,width:this.newWidth,height:this.newHeight,direction:"vertical"};this.element.dispatchEvent(new CustomEvent("resizing",{detail:e}))}}}i.d(e,"a",(function(){return o}))},function(t,e,i){},function(t,e,i){},function(t,e,i){var s={"./drag-drop.ts":[14,3],"./draggable.ts":[7,4],"./dropdown-select.ts":[13,1],"./modal-basic.ts":[8,5],"./modal-nested.ts":[9,6],"./modal-panels.ts":[10,7],"./resizable.ts":[11,8],"./select-list.ts":[12,2]};function o(t){if(!i.o(s,t))return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}));var e=s[t],o=e[0];return i.e(e[1]).then((function(){return i(o)}))}o.keys=function(){return Object.keys(s)},o.id=5,t.exports=o},function(t,e,i){"use strict";i.r(e);i(3),i(4);var s=i(0),o=i(1),n=i(2);class a extends HTMLElement{constructor(){super(),this.scrollTopEnable=!0,this.maximizable=!0,this.backdrop=!0,this.listeners=[];const t=document.createElement("template");t.innerHTML='\n  <div class="ui-modal-overlay" id="modalOverlay"></div>\n  <div class="ui-modal" tabindex="-1" role="dialog" id="modalRoot">\n    <div class="ui-modal-header" id="modalHeader">\n      <div class="ui-titlebar" id="titlebar">\n      </div>\n      <div class="ui-controlbar">\n        <i class="ui-icon" id="maximizeIcon"></i>\n        <i class="ui-icon dt-icon-close" id="closeIcon"></i>\n      </div>\n    </div>\n    <div class="ui-modal-body" id="modalBody"></div>\n    <div class="ui-modal-footer" id="modalFooter"></div>\n  </div>\n  ',this.appendChild(t.content.cloneNode(!0)),this.modalOverlay=this.querySelector("#modalOverlay"),this.modalRoot=this.querySelector("#modalRoot"),this.modalBody=this.querySelector("#modalBody"),this.modalHeader=this.querySelector("#modalHeader"),this.modalFooter=this.querySelector("#modalFooter"),this.maximizeIcon=this.querySelector("#maximizeIcon"),this.closeIcon=this.querySelector("#closeIcon"),this.titlebar=this.querySelector("#titlebar"),this.setDialogStyles(),this.setMaximizeIconStyles(),this.renderContent(),this.draggableDirective=new o.a(this.modalRoot),this.resizableDirective=new n.a(this.modalRoot)}get open(){return this.hasAttribute("open")}set open(t){t?this.setAttribute("open",""):this.removeAttribute("open")}disconnectedCallback(){this.removeEventListeners(),this.draggableDirective.destroy(),this.resizableDirective.destroy()}static get observedAttributes(){return["open"]}attributeChangedCallback(t,e,i){switch(t){case"open":this.open?this.show():this.hide()}}addEventListeners(){this.listeners=[{eventName:"click",target:this.closeIcon,handler:this.onCloseIconClick.bind(this)},{eventName:"click",target:this.maximizeIcon,handler:this.toggleMaximize.bind(this)},{eventName:"mousedown",target:this.modalHeader,handler:this.initDrag.bind(this)},{eventName:"touchstart",target:this.modalHeader,handler:this.initDrag.bind(this)},{eventName:"mousedown",target:this.modalRoot,handler:this.moveOnTop.bind(this)},{eventName:"touchstart",target:this.modalRoot,handler:this.moveOnTop.bind(this)},{eventName:"keydown",target:this,handler:this.onKeyDown.bind(this)},{eventName:"resizing",target:this.modalRoot,handler:this.onResize.bind(this)},{eventName:"resize",target:window,handler:this.onWindowResize.bind(this)}],this.listeners.forEach(t=>{t.target.addEventListener(t.eventName,t.handler)})}removeEventListeners(){this.listeners.forEach(t=>{t.target.removeEventListener(t.eventName,t.handler)})}renderContent(){const t=this.querySelector('[select="app-modal-header"]'),e=this.querySelector('[select="app-modal-body"]'),i=this.querySelector('[select="app-modal-footer"]');t&&this.titlebar.appendChild(t.content),e&&this.modalBody.appendChild(e.content),i&&this.modalFooter.appendChild(i.content)}show(){this.addEventListeners(),this.resizableDirective.addEventListeners(),this.center(),this.visible=!0,setTimeout(()=>{this.modalRoot.focus(),this.scrollTopEnable&&(this.modalBody.scrollTop=0)},1),this.setDialogStyles()}hide(){this.removeEventListeners(),this.resizableDirective.destroy(),this.visible=!1,this.dispatchEvent(new CustomEvent("closeModal")),this.focusLastModal(),this.setDialogStyles()}center(){let t=this.modalRoot.offsetWidth,e=this.modalRoot.offsetHeight;0===t&&0===e&&(this.modalRoot.style.visibility="hidden",this.modalRoot.style.display="block",t=this.modalRoot.offsetWidth,e=this.modalRoot.offsetHeight,this.modalRoot.style.display="none",this.modalRoot.style.visibility="visible");const i=Math.max((window.innerWidth-t)/2,0),s=Math.max((window.innerHeight-e)/2,0);this.modalRoot.style.left=i+"px",this.modalRoot.style.top=s+"px"}initDrag(t){t.target!==this.closeIcon&&(this.maximized||this.draggableDirective.start(t))}onResize(t){"vertical"===t.detail.direction&&this.calcBodyHeight()}calcBodyHeight(){const t=this.modalHeader.offsetHeight+this.modalFooter.offsetHeight,e=this.modalRoot.offsetHeight-t;this.modalBody.style.height=e+"px",this.modalBody.style.maxHeight="none"}getMaxModalIndex(){return Object(s.f)(".ui-modal")}focusLastModal(){const t=this.parentElement.closest(".ui-modal");t&&t.focus()}toggleMaximize(t){this.maximized?this.revertMaximize():this.maximize(),t.preventDefault(),this.setMaximizeIconStyles()}maximize(){this.preMaximizePageX=parseFloat(this.modalRoot.style.top),this.preMaximizePageY=parseFloat(this.modalRoot.style.left),this.preMaximizeRootWidth=this.modalRoot.offsetWidth,this.preMaximizeRootHeight=this.modalRoot.offsetHeight,this.preMaximizeBodyHeight=this.modalBody.offsetHeight,this.modalRoot.style.top="0px",this.modalRoot.style.left="0px",this.modalRoot.style.width="100vw",this.modalRoot.style.height="100vh";const t=this.modalHeader.offsetHeight+this.modalFooter.offsetHeight;this.modalBody.style.height="calc(100vh - "+t+"px)",this.modalBody.style.maxHeight="none",this.maximized=!0}revertMaximize(){this.modalRoot.style.top=this.preMaximizePageX+"px",this.modalRoot.style.left=this.preMaximizePageY+"px",this.modalRoot.style.width=this.preMaximizeRootWidth+"px",this.modalRoot.style.height=this.preMaximizeRootHeight+"px",this.modalBody.style.height=this.preMaximizeBodyHeight+"px",this.maximized=!1}moveOnTop(){if(!this.backdrop){const t=this.getMaxModalIndex();let e=parseFloat(window.getComputedStyle(this.modalRoot).zIndex)||0;e<=t&&(e=t+1,this.modalRoot.style.zIndex=e.toString())}}setDialogStyles(){this.modalRoot.style.display=this.visible?"block":"none",this.modalOverlay.style.display=this.visible&&this.backdrop?"block":"none"}setMaximizeIconStyles(){this.maximizeIcon.style.display=this.maximizable?"block":"none";const t=this.maximized?"dt-icon-normalize":"dt-icon-maximize";this.maximizeIcon.className="ui-icon "+t}onCloseIconClick(){this.hide()}onKeyDown(t){"Escape"==t.key&&(t.preventDefault(),t.stopPropagation(),this.hide())}onWindowResize(){this.center()}}async function h(t,e,s){try{const o=await i(5)(`./${e}.ts`);history.replaceState({},`${s}`,`/#${e}`),t.innerHTML=o.default,o.page()}catch(e){t.textContent=e.message}}customElements.define("web-modal",a),document.addEventListener("DOMContentLoaded",()=>{const t=document.querySelector("main"),e=Array.from(document.querySelectorAll(".sidenav > a"));h(t,location.hash.slice(1)||"modal-basic",""),e.forEach(e=>{e.addEventListener("click",async i=>{i.preventDefault(),h(t,e.dataset.chunk,e.innerText)})})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9saWIvdXRpbHMvYXJyYXktdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9saWIvdXRpbHMvZG9tLXV0aWxzLmpzIiwid2VicGFjazovLy8uLi9jb21tb24vbGliL2tleWNvZGVzLmpzIiwid2VicGFjazovLy8uLi9jb21tb24vbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9kcmFnZ2FibGUvbGliL2RyYWdnYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vZHJhZ2dhYmxlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVzaXphYmxlL2xpYi9yZXNpemFibGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3Jlc2l6YWJsZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzIGxhenkgXlxcLlxcLy4qXFwudHMkIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vLy4uL21vZGFsL2xpYi9tb2RhbC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImluc3RhbGxlZE1vZHVsZXMiLCIwIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwiZSIsInByb21pc2VzIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25TY3JpcHRDb21wbGV0ZSIsInNjcmlwdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJwIiwianNvbnBTY3JpcHRTcmMiLCJlcnJvciIsIkVycm9yIiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiY2xlYXJUaW1lb3V0IiwiY2h1bmsiLCJlcnJvclR5cGUiLCJ0eXBlIiwicmVhbFNyYyIsInRhcmdldCIsIm1lc3NhZ2UiLCJuYW1lIiwicmVxdWVzdCIsInVuZGVmaW5lZCIsInNldFRpbWVvdXQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJhbGwiLCJtIiwiYyIsImQiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJvZSIsImVyciIsImNvbnNvbGUiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwicyIsImFycmF5TW92ZSIsImFycmF5IiwiZnJvbUluZGV4IiwidG9JbmRleCIsImNsYW1wIiwic3BsaWNlIiwiYXJyYXlUcmFuc2ZlciIsImFycmF5RnJvbSIsImFycmF5VG8iLCJhIiwiYiIsIk1hdGgiLCJtYXgiLCJtaW4iLCJpc0xlZnRCdXR0b24iLCJidXR0b24iLCJnZXRFdmVudCIsImNoYW5nZWRUb3VjaGVzIiwic3RhcnRzV2l0aCIsInRhcmdldFRvdWNoZXMiLCJtYXhaSW5kZXgiLCJzZWxlY3RvcnMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwibWFwIiwicGFyc2VGbG9hdCIsImdldENvbXB1dGVkU3R5bGUiLCJ6SW5kZXgiLCJmaWx0ZXIiLCJpc05hTiIsInNvcnQiLCJwb3AiLCJLZXlzIiwiZWxlbWVudCIsImRyYWdYIiwiZHJhZ1kiLCJ0aGlzIiwiZ2xvYmFsTGlzdGVuZXJzIiwiTWFwIiwiZHJhZ0V2ZW50VGFyZ2V0Iiwib25Nb3VzZWRvd24iLCJyZW1vdmVFdmVudExpc3RlbmVycyIsImV2dCIsImluaXREcmFnIiwicGFnZVgiLCJwYWdlWSIsImFkZEV2ZW50TGlzdGVuZXJzIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwib25EcmFnIiwiZW5kRHJhZyIsImlzVG91Y2hFdmVudCIsIm1vdmVFdmVudCIsInVwRXZlbnQiLCJzZXQiLCJoYW5kbGVyIiwib25Nb3VzZW1vdmUiLCJvcHRpb25zIiwib25Nb3VzZXVwIiwiZm9yRWFjaCIsImNvbmZpZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNEcmFnZ2luZyIsImxhc3RQYWdlWCIsImxhc3RQYWdlWSIsImNsYXNzTGlzdCIsImFkZCIsImRlbHRhWCIsImRlbHRhWSIsImNvb3JkcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInN0eWxlIiwibGVmdCIsInRvcCIsInJlbW92ZSIsInNvdXRoIiwiZWFzdCIsInNvdXRoRWFzdCIsImdob3N0Iiwic3RhcnRMaXN0ZW5lcnMiLCJ2aWV3SW5pdCIsImNyZWF0ZUhhbmRsZSIsImNvbXB1dGVkU3R5bGUiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwibWluSGVpZ2h0IiwibWF4SGVpZ2h0IiwiaXNTb3V0aCIsImNvbnRhaW5zIiwiaXNFYXN0IiwiaXNTb3V0aEVhc3QiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2NyZWVuWCIsInNjcmVlblkiLCJpbml0UmVzaXplIiwib25Nb3ZlIiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJyZXNpemVXaWR0aCIsInJlc2l6ZUhlaWdodCIsImVuZFJlc2l6ZSIsImVkZ2VDbGFzcyIsIm5vZGUiLCJjbGFzc05hbWUiLCJyZXNpemluZ1MiLCJyZXNpemluZ0UiLCJyZXNpemluZ1NFIiwic3RvcFByb3BhZ2F0aW9uIiwicmVzaXphYmxlRXZlbnQiLCJvdmVyTWluV2lkdGgiLCJ1bmRlck1heFdpZHRoIiwiZGlyZWN0aW9uIiwib3Zlck1pbkhlaWdodCIsInVuZGVyTWF4SGVpZ2h0Iiwid2VicGFja0FzeW5jQ29udGV4dCIsInJlcSIsInRoZW4iLCJjb2RlIiwiaWRzIiwiaWQiLCJrZXlzIiwiSFRNTEVsZW1lbnQiLCJzdXBlciIsInNjcm9sbFRvcEVuYWJsZSIsIm1heGltaXphYmxlIiwiYmFja2Ryb3AiLCJsaXN0ZW5lcnMiLCJ0ZW1wbGF0ZSIsImlubmVySFRNTCIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJtb2RhbE92ZXJsYXkiLCJxdWVyeVNlbGVjdG9yIiwibW9kYWxSb290IiwibW9kYWxCb2R5IiwibW9kYWxIZWFkZXIiLCJtb2RhbEZvb3RlciIsIm1heGltaXplSWNvbiIsImNsb3NlSWNvbiIsInRpdGxlYmFyIiwic2V0RGlhbG9nU3R5bGVzIiwic2V0TWF4aW1pemVJY29uU3R5bGVzIiwicmVuZGVyQ29udGVudCIsImRyYWdnYWJsZURpcmVjdGl2ZSIsInJlc2l6YWJsZURpcmVjdGl2ZSIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImRlc3Ryb3kiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwib3BlbiIsInNob3ciLCJoaWRlIiwiZXZlbnROYW1lIiwib25DbG9zZUljb25DbGljayIsInRvZ2dsZU1heGltaXplIiwibW92ZU9uVG9wIiwib25LZXlEb3duIiwib25SZXNpemUiLCJvbldpbmRvd1Jlc2l6ZSIsIngiLCJoZWFkZXIiLCJib2R5IiwiZm9vdGVyIiwiY2VudGVyIiwidmlzaWJsZSIsImZvY3VzIiwic2Nyb2xsVG9wIiwiZm9jdXNMYXN0TW9kYWwiLCJlbGVtZW50V2lkdGgiLCJvZmZzZXRXaWR0aCIsImVsZW1lbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJ2aXNpYmlsaXR5IiwiZGlzcGxheSIsImlubmVyV2lkdGgiLCJ5IiwiaW5uZXJIZWlnaHQiLCJtYXhpbWl6ZWQiLCJzdGFydCIsImNhbGNCb2R5SGVpZ2h0IiwiZGlmZkhlaWdodCIsImNvbnRlbnRIZWlnaHQiLCJtb2RhbCIsInBhcmVudEVsZW1lbnQiLCJjbG9zZXN0IiwicmV2ZXJ0TWF4aW1pemUiLCJtYXhpbWl6ZSIsInByZXZlbnREZWZhdWx0IiwicHJlTWF4aW1pemVQYWdlWCIsInByZU1heGltaXplUGFnZVkiLCJwcmVNYXhpbWl6ZVJvb3RXaWR0aCIsInByZU1heGltaXplUm9vdEhlaWdodCIsInByZU1heGltaXplQm9keUhlaWdodCIsIm1heE1vZGFsSW5kZXgiLCJnZXRNYXhNb2RhbEluZGV4IiwidG9TdHJpbmciLCJjbHMiLCJhc3luYyIsInNldFBhZ2UiLCJtYWluIiwidGl0bGUiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwiZGVmYXVsdCIsInBhZ2UiLCJ0ZXh0Q29udGVudCIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwibGlua3MiLCJsb2NhdGlvbiIsImhhc2giLCJsaW5rIiwiZGF0YXNldCIsImlubmVyVGV4dCJdLCJtYXBwaW5ncyI6ImFBQ0UsU0FBU0EsRUFBcUJDLEdBUTdCLElBUEEsSUFNSUMsRUFBVUMsRUFOVkMsRUFBV0gsRUFBSyxHQUNoQkksRUFBY0osRUFBSyxHQUtBSyxFQUFJLEVBQUdDLEVBQVcsR0FDcENELEVBQUlGLEVBQVNJLE9BQVFGLElBQ3pCSCxFQUFVQyxFQUFTRSxHQUNoQkcsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBaUJWLElBQVlVLEVBQWdCVixJQUNwRkksRUFBU08sS0FBS0QsRUFBZ0JWLEdBQVMsSUFFeENVLEVBQWdCVixHQUFXLEVBRTVCLElBQUlELEtBQVlHLEVBQ1pJLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtQLEVBQWFILEtBQ3BEYSxFQUFRYixHQUFZRyxFQUFZSCxJQUtsQyxJQUZHYyxHQUFxQkEsRUFBb0JmLEdBRXRDTSxFQUFTQyxRQUNkRCxFQUFTVSxPQUFUVixHQU9GLElBQUlXLEVB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dEQsSUFDRSxNQUFNdFIsUUFBZSxLQUFPLEtBQVdnQyxRQUN2Q3VQLFFBQVFDLGFBQWEsR0FBSSxHQUFHRixJQUFTLEtBQUt0UCxLQUMxQ3FQLEVBQUt4RSxVQUFZN00sRUFBT3lSLFFBQ3hCelIsRUFBTzBSLE9BQ1AsTUFBT3RRLEdBQ1BpUSxFQUFLTSxZQUFjdlEsRUFBTVcsU0RnUTdCNlAsZUFBZUMsT0FBTyxZQUFhLEdDNVBuQ2xSLFNBQVN5SCxpQkFBaUIsbUJBQW9CLEtBQzVDLE1BQU1pSixFQUFvQjFRLFNBQVNzTSxjQUFjLFFBQzNDNkUsRUFBdUJuTSxNQUFNQyxLQUFLakYsU0FBU2tGLGlCQUFpQixpQkFFbEV1TCxFQUFRQyxFQUFNVSxTQUFTQyxLQUFLN04sTUFBTSxJQUFNLGNBQWUsSUFFdkQyTixFQUFNNUosUUFBUytKLElBQ2JBLEVBQUs3SixpQkFBaUIsUUFBUytJLE1BQU9qUixJQUNsQ0EsRUFBRXVRLGlCQUNGVyxFQUFRQyxFQUFNWSxFQUFLQyxRQUFReFEsTUFBT3VRLEVBQUtFIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuXG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdH07XG5cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cblxuXG4gXHQvLyBzY3JpcHQgcGF0aCBmdW5jdGlvblxuIFx0ZnVuY3Rpb24ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCkge1xuIFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIlxuIFx0fVxuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cbiBcdC8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbiBcdC8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5lID0gZnVuY3Rpb24gcmVxdWlyZUVuc3VyZShjaHVua0lkKSB7XG4gXHRcdHZhciBwcm9taXNlcyA9IFtdO1xuXG5cbiBcdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXG4gXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuIFx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcbiBcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuIFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG4gXHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gXHRcdFx0XHR2YXIgb25TY3JpcHRDb21wbGV0ZTtcblxuIFx0XHRcdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuIFx0XHRcdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG4gXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuIFx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzY3JpcHQuc3JjID0ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCk7XG5cbiBcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcbiBcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuIFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuIFx0XHRcdFx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG4gXHRcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG4gXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiBcdFx0XHRcdFx0dmFyIGNodW5rID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0XHRcdFx0XHRpZihjaHVuayAhPT0gMCkge1xuIFx0XHRcdFx0XHRcdGlmKGNodW5rKSB7XG4gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuIFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcbiBcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcbiBcdFx0XHRcdFx0XHRcdGNodW5rWzFdKGVycm9yKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9O1xuIFx0XHRcdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gXHRcdFx0XHRcdG9uU2NyaXB0Q29tcGxldGUoeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pO1xuIFx0XHRcdFx0fSwgMTIwMDAwKTtcbiBcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGU7XG4gXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gXHR9O1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIG9uIGVycm9yIGZ1bmN0aW9uIGZvciBhc3luYyBsb2FkaW5nXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm9lID0gZnVuY3Rpb24oZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9O1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2KTtcbiIsImV4cG9ydCBmdW5jdGlvbiBhcnJheU1vdmUoYXJyYXksIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAgIGZyb21JbmRleCA9IGNsYW1wKGZyb21JbmRleCwgYXJyYXkubGVuZ3RoIC0gMSk7XG4gICAgdG9JbmRleCA9IGNsYW1wKHRvSW5kZXgsIGFycmF5Lmxlbmd0aCAtIDEpO1xuICAgIGlmIChmcm9tSW5kZXggIT09IHRvSW5kZXgpIHtcbiAgICAgICAgYXJyYXkuc3BsaWNlKHRvSW5kZXgsIDAsIGFycmF5LnNwbGljZShmcm9tSW5kZXgsIDEpWzBdKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXJyYXlUcmFuc2ZlcihhcnJheUZyb20sIGFycmF5VG8sIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAgIGZyb21JbmRleCA9IGNsYW1wKGZyb21JbmRleCwgYXJyYXlGcm9tLmxlbmd0aCAtIDEpO1xuICAgIHRvSW5kZXggPSBjbGFtcCh0b0luZGV4LCBhcnJheVRvLmxlbmd0aCk7XG4gICAgaWYgKGFycmF5RnJvbS5sZW5ndGgpIHtcbiAgICAgICAgYXJyYXlUby5zcGxpY2UodG9JbmRleCwgMCwgYXJyYXlGcm9tLnNwbGljZShmcm9tSW5kZXgsIDEpWzBdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGFtcChhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKGEsIGIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVBhZ2luYXRlKGFycmF5LCBjdXJyZW50UGFnZSwgcGVyUGFnZSkge1xuICAgIGlmICghYXJyYXkgfHwgIWN1cnJlbnRQYWdlIHx8ICFwZXJQYWdlKSB7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnQgPSAoY3VycmVudFBhZ2UgLSAxKSAqIHBlclBhZ2U7XG4gICAgY29uc3QgZW5kID0gcGVyUGFnZSA+IC0xID8gKHN0YXJ0ICsgcGVyUGFnZSkgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGFycmF5LnNsaWNlKHN0YXJ0LCBlbmQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyYXktdXRpbHMuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzTGVmdEJ1dHRvbihldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uID09PSAwKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudChldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnIHx8IGV2ZW50LnR5cGUgPT09ICd0b3VjaGNhbmNlbCcpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnQudHlwZS5zdGFydHNXaXRoKCd0b3VjaCcpID8gZXZlbnQudGFyZ2V0VG91Y2hlc1swXSA6IGV2ZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1heFpJbmRleChzZWxlY3RvcnMgPSAnYm9keSAqJykge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JzKSlcbiAgICAgICAgLm1hcChhID0+IHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoYSkuekluZGV4KSlcbiAgICAgICAgLmZpbHRlcihhID0+ICFpc05hTihhKSlcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEgLSBiKVxuICAgICAgICAucG9wKCkgfHwgMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQW5jZXN0b3IoZWwsIHNlbGVjdG9ycykge1xuICAgIGlmICh0eXBlb2YgZWwuY2xvc2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZWwuY2xvc2VzdChzZWxlY3RvcnMpIHx8IG51bGw7XG4gICAgfVxuICAgIHdoaWxlIChlbCkge1xuICAgICAgICBpZiAoZWwubWF0Y2hlcyhzZWxlY3RvcnMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH1cbiAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c1N0aWNreVBvc2l0aW9uKCkge1xuICAgIGlmICghKCdDU1MnIGluIHdpbmRvdykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKENTUy5zdXBwb3J0cygncG9zaXRpb24nLCAnc3RpY2t5JykgfHxcbiAgICAgICAgQ1NTLnN1cHBvcnRzKCdwb3NpdGlvbicsICctd2Via2l0LXN0aWNreScpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvbS11dGlscy5qcy5tYXAiLCJleHBvcnQgdmFyIEtleXM7XG4oZnVuY3Rpb24gKEtleXMpIHtcbiAgICBLZXlzW0tleXNbXCJCQUNLU1BBQ0VcIl0gPSA4XSA9IFwiQkFDS1NQQUNFXCI7XG4gICAgS2V5c1tLZXlzW1wiVEFCXCJdID0gOV0gPSBcIlRBQlwiO1xuICAgIEtleXNbS2V5c1tcIkVOVEVSXCJdID0gMTNdID0gXCJFTlRFUlwiO1xuICAgIEtleXNbS2V5c1tcIkVTQ0FQRVwiXSA9IDI3XSA9IFwiRVNDQVBFXCI7XG4gICAgS2V5c1tLZXlzW1wiU1BBQ0VcIl0gPSAzMl0gPSBcIlNQQUNFXCI7XG4gICAgS2V5c1tLZXlzW1wiTEVGVFwiXSA9IDM3XSA9IFwiTEVGVFwiO1xuICAgIEtleXNbS2V5c1tcIlVQXCJdID0gMzhdID0gXCJVUFwiO1xuICAgIEtleXNbS2V5c1tcIlJJR0hUXCJdID0gMzldID0gXCJSSUdIVFwiO1xuICAgIEtleXNbS2V5c1tcIkRPV05cIl0gPSA0MF0gPSBcIkRPV05cIjtcbiAgICBLZXlzW0tleXNbXCJERUxFVEVcIl0gPSA0Nl0gPSBcIkRFTEVURVwiO1xuICAgIEtleXNbS2V5c1tcIktFWV9GMlwiXSA9IDExM10gPSBcIktFWV9GMlwiO1xufSkoS2V5cyB8fCAoS2V5cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXljb2Rlcy5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCAqIGZyb20gJy4vdmFsaWRhdG9ycyc7XG5leHBvcnQgKiBmcm9tICcuL2tleWNvZGVzJztcbmV4cG9ydCAqIGZyb20gJy4vZXhwb3J0LWNzdic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBpc0xlZnRCdXR0b24sIGdldEV2ZW50IH0gZnJvbSAnQG1hemRpay1saWIvY29tbW9uJztcbmV4cG9ydCBjbGFzcyBEcmFnZ2FibGUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGRyYWdYID0gdHJ1ZSwgZHJhZ1kgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZHJhZ1ggPSBkcmFnWDtcbiAgICAgICAgdGhpcy5kcmFnWSA9IGRyYWdZO1xuICAgICAgICB0aGlzLmdsb2JhbExpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc3RhcnQoZHJhZ0V2ZW50VGFyZ2V0KSB7XG4gICAgICAgIHRoaXMub25Nb3VzZWRvd24oZHJhZ0V2ZW50VGFyZ2V0KTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgICBvbk1vdXNlZG93bihldmVudCkge1xuICAgICAgICBpZiAoIWlzTGVmdEJ1dHRvbihldmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kcmFnWCB8fCB0aGlzLmRyYWdZKSB7XG4gICAgICAgICAgICBjb25zdCBldnQgPSBnZXRFdmVudChldmVudCk7XG4gICAgICAgICAgICB0aGlzLmluaXREcmFnKGV2dC5wYWdlWCwgZXZ0LnBhZ2VZKTtcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkcmFnU3RhcnQnLCB7IGRldGFpbDogZXZlbnQgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uTW91c2Vtb3ZlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGV2dCA9IGdldEV2ZW50KGV2ZW50KTtcbiAgICAgICAgdGhpcy5vbkRyYWcoZXZ0LnBhZ2VYLCBldnQucGFnZVkpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2RyYWdNb3ZlJywgeyBkZXRhaWw6IGV2ZW50IH0pKTtcbiAgICB9XG4gICAgb25Nb3VzZXVwKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZW5kRHJhZygpO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZHJhZ0VuZCcsIHsgZGV0YWlsOiBldmVudCB9KSk7XG4gICAgfVxuICAgIGFkZEV2ZW50TGlzdGVuZXJzKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGlzVG91Y2hFdmVudCA9IGV2ZW50LnR5cGUuc3RhcnRzV2l0aCgndG91Y2gnKTtcbiAgICAgICAgY29uc3QgbW92ZUV2ZW50ID0gaXNUb3VjaEV2ZW50ID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJztcbiAgICAgICAgY29uc3QgdXBFdmVudCA9IGlzVG91Y2hFdmVudCA/ICd0b3VjaGVuZCcgOiAnbW91c2V1cCc7XG4gICAgICAgIHRoaXMuZ2xvYmFsTGlzdGVuZXJzXG4gICAgICAgICAgICAuc2V0KG1vdmVFdmVudCwge1xuICAgICAgICAgICAgaGFuZGxlcjogdGhpcy5vbk1vdXNlbW92ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgb3B0aW9uczogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zZXQodXBFdmVudCwge1xuICAgICAgICAgICAgaGFuZGxlcjogdGhpcy5vbk1vdXNldXAuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9wdGlvbnM6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdsb2JhbExpc3RlbmVycy5mb3JFYWNoKChjb25maWcsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGNvbmZpZy5oYW5kbGVyLCBjb25maWcub3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxMaXN0ZW5lcnMuZm9yRWFjaCgoY29uZmlnLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBjb25maWcuaGFuZGxlciwgY29uZmlnLm9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdERyYWcocGFnZVgsIHBhZ2VZKSB7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMubGFzdFBhZ2VYID0gcGFnZVg7XG4gICAgICAgIHRoaXMubGFzdFBhZ2VZID0gcGFnZVk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdkcmFnZ2luZycpO1xuICAgIH1cbiAgICBvbkRyYWcocGFnZVgsIHBhZ2VZKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhWCA9IHBhZ2VYIC0gdGhpcy5sYXN0UGFnZVg7XG4gICAgICAgICAgICBjb25zdCBkZWx0YVkgPSBwYWdlWSAtIHRoaXMubGFzdFBhZ2VZO1xuICAgICAgICAgICAgY29uc3QgY29vcmRzID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmxlZnQgPSBjb29yZHMubGVmdCArIGRlbHRhWCArICdweCc7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudG9wID0gY29vcmRzLnRvcCArIGRlbHRhWSArICdweCc7XG4gICAgICAgICAgICB0aGlzLmxhc3RQYWdlWCA9IHBhZ2VYO1xuICAgICAgICAgICAgdGhpcy5sYXN0UGFnZVkgPSBwYWdlWTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbmREcmFnKCkge1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdnaW5nJyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhZ2dhYmxlLmpzLm1hcCIsImV4cG9ydCAqIGZyb20gJy4vZHJhZ2dhYmxlJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7IGlzTGVmdEJ1dHRvbiwgZ2V0RXZlbnQgfSBmcm9tICdAbWF6ZGlrLWxpYi9jb21tb24nO1xuZXhwb3J0IGNsYXNzIFJlc2l6YWJsZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgc291dGggPSB0cnVlLCBlYXN0ID0gdHJ1ZSwgc291dGhFYXN0ID0gdHJ1ZSwgZ2hvc3QgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLnNvdXRoID0gc291dGg7XG4gICAgICAgIHRoaXMuZWFzdCA9IGVhc3Q7XG4gICAgICAgIHRoaXMuc291dGhFYXN0ID0gc291dGhFYXN0O1xuICAgICAgICB0aGlzLmdob3N0ID0gZ2hvc3Q7XG4gICAgICAgIHRoaXMuc3RhcnRMaXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuZ2xvYmFsTGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnZpZXdJbml0KCk7XG4gICAgfVxuICAgIHZpZXdJbml0KCkge1xuICAgICAgICBpZiAodGhpcy5zb3V0aCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVIYW5kbGUoJ3Jlc2l6ZS1oYW5kbGUtcycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVhc3QpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlSGFuZGxlKCdyZXNpemUtaGFuZGxlLWUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zb3V0aEVhc3QpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlSGFuZGxlKCdyZXNpemUtaGFuZGxlLXNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMubWluV2lkdGggPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUubWluV2lkdGgpO1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gcGFyc2VGbG9hdChjb21wdXRlZFN0eWxlLm1heFdpZHRoKTtcbiAgICAgICAgdGhpcy5taW5IZWlnaHQgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUubWluSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5tYXhIZWlnaHQgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUubWF4SGVpZ2h0KTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5zdGFydExpc3RlbmVyc1xuICAgICAgICAgICAgLnNldCgnbW91c2Vkb3duJywge1xuICAgICAgICAgICAgaGFuZGxlcjogdGhpcy5vbk1vdXNlZG93bi5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgb3B0aW9uczogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zZXQoJ3RvdWNoc3RhcnQnLCB7XG4gICAgICAgICAgICBoYW5kbGVyOiB0aGlzLm9uTW91c2Vkb3duLmJpbmQodGhpcyksXG4gICAgICAgICAgICBvcHRpb25zOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGFydExpc3RlbmVycy5mb3JFYWNoKChjb25maWcsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGNvbmZpZy5oYW5kbGVyLCBjb25maWcub3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5zdGFydExpc3RlbmVycy5mb3JFYWNoKChjb25maWcsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGNvbmZpZy5oYW5kbGVyLCBjb25maWcub3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbk1vdXNlZG93bihldmVudCkge1xuICAgICAgICBpZiAoIWlzTGVmdEJ1dHRvbihldmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbGFzc0xpc3QgPSAoZXZlbnQudGFyZ2V0KS5jbGFzc0xpc3Q7XG4gICAgICAgIGNvbnN0IGlzU291dGggPSBjbGFzc0xpc3QuY29udGFpbnMoJ3Jlc2l6ZS1oYW5kbGUtcycpO1xuICAgICAgICBjb25zdCBpc0Vhc3QgPSBjbGFzc0xpc3QuY29udGFpbnMoJ3Jlc2l6ZS1oYW5kbGUtZScpO1xuICAgICAgICBjb25zdCBpc1NvdXRoRWFzdCA9IGNsYXNzTGlzdC5jb250YWlucygncmVzaXplLWhhbmRsZS1zZScpO1xuICAgICAgICBjb25zdCBldnQgPSBnZXRFdmVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5lbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgICAgICBjb25zdCBzY3JlZW5YID0gZXZ0LnNjcmVlblg7XG4gICAgICAgIGNvbnN0IHNjcmVlblkgPSBldnQuc2NyZWVuWTtcbiAgICAgICAgY29uc3QgaXNUb3VjaEV2ZW50ID0gZXZlbnQudHlwZS5zdGFydHNXaXRoKCd0b3VjaCcpO1xuICAgICAgICBjb25zdCBtb3ZlRXZlbnQgPSBpc1RvdWNoRXZlbnQgPyAndG91Y2htb3ZlJyA6ICdtb3VzZW1vdmUnO1xuICAgICAgICBjb25zdCB1cEV2ZW50ID0gaXNUb3VjaEV2ZW50ID8gJ3RvdWNoZW5kJyA6ICdtb3VzZXVwJztcbiAgICAgICAgaWYgKGlzU291dGggfHwgaXNFYXN0IHx8IGlzU291dGhFYXN0KSB7XG4gICAgICAgICAgICB0aGlzLmluaXRSZXNpemUoZXZlbnQsIGlzU291dGgsIGlzRWFzdCwgaXNTb3V0aEVhc3QpO1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxMaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICAuc2V0KG1vdmVFdmVudCwge1xuICAgICAgICAgICAgICAgIGhhbmRsZXI6IHRoaXMub25Nb3ZlLmJpbmQodGhpcywgd2lkdGgsIGhlaWdodCwgc2NyZWVuWCwgc2NyZWVuWSksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZmFsc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnNldCh1cEV2ZW50LCB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcjogdGhpcy5vbk1vdXNldXAuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbExpc3RlbmVycy5mb3JFYWNoKChjb25maWcsIG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBjb25maWcuaGFuZGxlciwgY29uZmlnLm9wdGlvbnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25Nb3ZlKHdpZHRoLCBoZWlnaHQsIHNjcmVlblgsIHNjcmVlblksIGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGV2dCA9IGdldEV2ZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbW92ZW1lbnRYID0gZXZ0LnNjcmVlblggLSBzY3JlZW5YO1xuICAgICAgICBjb25zdCBtb3ZlbWVudFkgPSBldnQuc2NyZWVuWSAtIHNjcmVlblk7XG4gICAgICAgIHRoaXMubmV3V2lkdGggPSB3aWR0aCArIG1vdmVtZW50WDtcbiAgICAgICAgdGhpcy5uZXdIZWlnaHQgPSBoZWlnaHQgKyBtb3ZlbWVudFk7XG4gICAgICAgIHRoaXMucmVzaXplV2lkdGgoZXZ0KTtcbiAgICAgICAgdGhpcy5yZXNpemVIZWlnaHQoZXZ0KTtcbiAgICB9XG4gICAgb25Nb3VzZXVwKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZW5kUmVzaXplKGV2ZW50KTtcbiAgICAgICAgdGhpcy5nbG9iYWxMaXN0ZW5lcnMuZm9yRWFjaCgoY29uZmlnLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBjb25maWcuaGFuZGxlciwgY29uZmlnLm9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY3JlYXRlSGFuZGxlKGVkZ2VDbGFzcykge1xuICAgICAgICBjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGVkZ2VDbGFzcztcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgICBpbml0UmVzaXplKGV2ZW50LCBpc1NvdXRoLCBpc0Vhc3QsIGlzU291dGhFYXN0KSB7XG4gICAgICAgIGlmIChpc1NvdXRoKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6aW5nUyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRWFzdCkge1xuICAgICAgICAgICAgdGhpcy5yZXNpemluZ0UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1NvdXRoRWFzdCkge1xuICAgICAgICAgICAgdGhpcy5yZXNpemluZ1NFID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncmVzaXppbmcnKTtcbiAgICAgICAgdGhpcy5uZXdXaWR0aCA9IHRoaXMuZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgdGhpcy5uZXdIZWlnaHQgPSB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdyZXNpemVCZWdpbicpKTtcbiAgICB9XG4gICAgZW5kUmVzaXplKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucmVzaXppbmdTID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzaXppbmdFID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzaXppbmdTRSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncmVzaXppbmcnKTtcbiAgICAgICAgY29uc3QgcmVzaXphYmxlRXZlbnQgPSB7IGV2ZW50OiBnZXRFdmVudChldmVudCksIHdpZHRoOiB0aGlzLm5ld1dpZHRoLCBoZWlnaHQ6IHRoaXMubmV3SGVpZ2h0IH07XG4gICAgICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgncmVzaXplRW5kJywgeyBkZXRhaWw6IHJlc2l6YWJsZUV2ZW50IH0pKTtcbiAgICB9XG4gICAgcmVzaXplV2lkdGgoZXZlbnQpIHtcbiAgICAgICAgY29uc3Qgb3Zlck1pbldpZHRoID0gIXRoaXMubWluV2lkdGggfHwgdGhpcy5uZXdXaWR0aCA+PSB0aGlzLm1pbldpZHRoO1xuICAgICAgICBjb25zdCB1bmRlck1heFdpZHRoID0gIXRoaXMubWF4V2lkdGggfHwgdGhpcy5uZXdXaWR0aCA8PSB0aGlzLm1heFdpZHRoO1xuICAgICAgICBpZiAodGhpcy5yZXNpemluZ1NFIHx8IHRoaXMucmVzaXppbmdFKSB7XG4gICAgICAgICAgICBpZiAob3Zlck1pbldpZHRoICYmIHVuZGVyTWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2hvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gYCR7dGhpcy5uZXdXaWR0aH1weGA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc2l6YWJsZUV2ZW50ID0geyBldmVudCwgd2lkdGg6IHRoaXMubmV3V2lkdGgsIGhlaWdodDogdGhpcy5uZXdIZWlnaHQsIGRpcmVjdGlvbjogJ2hvcml6b250YWwnIH07XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdyZXNpemluZycsIHsgZGV0YWlsOiByZXNpemFibGVFdmVudCB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzaXplSGVpZ2h0KGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IG92ZXJNaW5IZWlnaHQgPSAhdGhpcy5taW5IZWlnaHQgfHwgdGhpcy5uZXdIZWlnaHQgPj0gdGhpcy5taW5IZWlnaHQ7XG4gICAgICAgIGNvbnN0IHVuZGVyTWF4SGVpZ2h0ID0gIXRoaXMubWF4SGVpZ2h0IHx8IHRoaXMubmV3SGVpZ2h0IDw9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5yZXNpemluZ1NFIHx8IHRoaXMucmVzaXppbmdTKSB7XG4gICAgICAgICAgICBpZiAob3Zlck1pbkhlaWdodCAmJiB1bmRlck1heEhlaWdodCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5naG9zdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5uZXdIZWlnaHR9cHhgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXNpemFibGVFdmVudCA9IHsgZXZlbnQsIHdpZHRoOiB0aGlzLm5ld1dpZHRoLCBoZWlnaHQ6IHRoaXMubmV3SGVpZ2h0LCBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3Jlc2l6aW5nJywgeyBkZXRhaWw6IHJlc2l6YWJsZUV2ZW50IH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc2l6YWJsZS5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL3Jlc2l6YWJsZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJ2YXIgbWFwID0ge1xuXHRcIi4vZHJhZy1kcm9wLnRzXCI6IFtcblx0XHQxNCxcblx0XHQzXG5cdF0sXG5cdFwiLi9kcmFnZ2FibGUudHNcIjogW1xuXHRcdDcsXG5cdFx0NFxuXHRdLFxuXHRcIi4vZHJvcGRvd24tc2VsZWN0LnRzXCI6IFtcblx0XHQxMyxcblx0XHQxXG5cdF0sXG5cdFwiLi9tb2RhbC1iYXNpYy50c1wiOiBbXG5cdFx0OCxcblx0XHQ1XG5cdF0sXG5cdFwiLi9tb2RhbC1uZXN0ZWQudHNcIjogW1xuXHRcdDksXG5cdFx0NlxuXHRdLFxuXHRcIi4vbW9kYWwtcGFuZWxzLnRzXCI6IFtcblx0XHQxMCxcblx0XHQ3XG5cdF0sXG5cdFwiLi9yZXNpemFibGUudHNcIjogW1xuXHRcdDExLFxuXHRcdDhcblx0XSxcblx0XCIuL3NlbGVjdC1saXN0LnRzXCI6IFtcblx0XHQxMixcblx0XHQyXG5cdF1cbn07XG5mdW5jdGlvbiB3ZWJwYWNrQXN5bmNDb250ZXh0KHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9KTtcblx0fVxuXG5cdHZhciBpZHMgPSBtYXBbcmVxXSwgaWQgPSBpZHNbMF07XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoaWRzWzFdKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcblx0fSk7XG59XG53ZWJwYWNrQXN5bmNDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQXN5bmNDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0FzeW5jQ29udGV4dC5pZCA9IDU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tBc3luY0NvbnRleHQ7IiwiaW1wb3J0IHsgbWF4WkluZGV4IH0gZnJvbSAnQG1hemRpay1saWIvY29tbW9uJztcbmltcG9ydCB7IERyYWdnYWJsZSB9IGZyb20gJ0BtYXpkaWstbGliL2RyYWdnYWJsZSc7XG5pbXBvcnQgeyBSZXNpemFibGUgfSBmcm9tICdAbWF6ZGlrLWxpYi9yZXNpemFibGUnO1xuZnVuY3Rpb24gZ2V0VGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIGBcbiAgPGRpdiBjbGFzcz1cInVpLW1vZGFsLW92ZXJsYXlcIiBpZD1cIm1vZGFsT3ZlcmxheVwiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwidWktbW9kYWxcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIGlkPVwibW9kYWxSb290XCI+XG4gICAgPGRpdiBjbGFzcz1cInVpLW1vZGFsLWhlYWRlclwiIGlkPVwibW9kYWxIZWFkZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ1aS10aXRsZWJhclwiIGlkPVwidGl0bGViYXJcIj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInVpLWNvbnRyb2xiYXJcIj5cbiAgICAgICAgPGkgY2xhc3M9XCJ1aS1pY29uXCIgaWQ9XCJtYXhpbWl6ZUljb25cIj48L2k+XG4gICAgICAgIDxpIGNsYXNzPVwidWktaWNvbiBkdC1pY29uLWNsb3NlXCIgaWQ9XCJjbG9zZUljb25cIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidWktbW9kYWwtYm9keVwiIGlkPVwibW9kYWxCb2R5XCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInVpLW1vZGFsLWZvb3RlclwiIGlkPVwibW9kYWxGb290ZXJcIj48L2Rpdj5cbiAgPC9kaXY+XG4gIGA7XG59XG5leHBvcnQgY2xhc3MgTW9kYWxDb21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9wRW5hYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXhpbWl6YWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuYmFja2Ryb3AgPSB0cnVlO1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGdldFRlbXBsYXRlKCk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICB0aGlzLm1vZGFsT3ZlcmxheSA9IHRoaXMucXVlcnlTZWxlY3RvcignI21vZGFsT3ZlcmxheScpO1xuICAgICAgICB0aGlzLm1vZGFsUm9vdCA9IHRoaXMucXVlcnlTZWxlY3RvcignI21vZGFsUm9vdCcpO1xuICAgICAgICB0aGlzLm1vZGFsQm9keSA9IHRoaXMucXVlcnlTZWxlY3RvcignI21vZGFsQm9keScpO1xuICAgICAgICB0aGlzLm1vZGFsSGVhZGVyID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcjbW9kYWxIZWFkZXInKTtcbiAgICAgICAgdGhpcy5tb2RhbEZvb3RlciA9IHRoaXMucXVlcnlTZWxlY3RvcignI21vZGFsRm9vdGVyJyk7XG4gICAgICAgIHRoaXMubWF4aW1pemVJY29uID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcjbWF4aW1pemVJY29uJyk7XG4gICAgICAgIHRoaXMuY2xvc2VJY29uID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcjY2xvc2VJY29uJyk7XG4gICAgICAgIHRoaXMudGl0bGViYXIgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyN0aXRsZWJhcicpO1xuICAgICAgICB0aGlzLnNldERpYWxvZ1N0eWxlcygpO1xuICAgICAgICB0aGlzLnNldE1heGltaXplSWNvblN0eWxlcygpO1xuICAgICAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcbiAgICAgICAgdGhpcy5kcmFnZ2FibGVEaXJlY3RpdmUgPSBuZXcgRHJhZ2dhYmxlKHRoaXMubW9kYWxSb290KTtcbiAgICAgICAgdGhpcy5yZXNpemFibGVEaXJlY3RpdmUgPSBuZXcgUmVzaXphYmxlKHRoaXMubW9kYWxSb290KTtcbiAgICB9XG4gICAgZ2V0IG9wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0F0dHJpYnV0ZSgnb3BlbicpO1xuICAgIH1cbiAgICBzZXQgb3Blbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA/IHRoaXMuc2V0QXR0cmlidXRlKCdvcGVuJywgJycpIDogdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ29wZW4nKTtcbiAgICB9XG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5kcmFnZ2FibGVEaXJlY3RpdmUuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJlc2l6YWJsZURpcmVjdGl2ZS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gWydvcGVuJ107XG4gICAgfVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW4gPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmNsb3NlSWNvbixcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiB0aGlzLm9uQ2xvc2VJY29uQ2xpY2suYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLm1heGltaXplSWNvbixcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiB0aGlzLnRvZ2dsZU1heGltaXplLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiAnbW91c2Vkb3duJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMubW9kYWxIZWFkZXIsXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogdGhpcy5pbml0RHJhZy5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogJ3RvdWNoc3RhcnQnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcy5tb2RhbEhlYWRlcixcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiB0aGlzLmluaXREcmFnLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiAnbW91c2Vkb3duJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMubW9kYWxSb290LFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IHRoaXMubW92ZU9uVG9wLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiAndG91Y2hzdGFydCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLm1vZGFsUm9vdCxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiB0aGlzLm1vdmVPblRvcC5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogJ2tleWRvd24nLFxuICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogJ3Jlc2l6aW5nJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMubW9kYWxSb290LFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IHRoaXMub25SZXNpemUuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6ICdyZXNpemUnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogd2luZG93LFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKHggPT4ge1xuICAgICAgICAgICAgeC50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih4LmV2ZW50TmFtZSwgeC5oYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKHggPT4ge1xuICAgICAgICAgICAgeC50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih4LmV2ZW50TmFtZSwgeC5oYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMucXVlcnlTZWxlY3RvcignW3NlbGVjdD1cImFwcC1tb2RhbC1oZWFkZXJcIl0nKTtcbiAgICAgICAgY29uc3QgYm9keSA9IHRoaXMucXVlcnlTZWxlY3RvcignW3NlbGVjdD1cImFwcC1tb2RhbC1ib2R5XCJdJyk7XG4gICAgICAgIGNvbnN0IGZvb3RlciA9IHRoaXMucXVlcnlTZWxlY3RvcignW3NlbGVjdD1cImFwcC1tb2RhbC1mb290ZXJcIl0nKTtcbiAgICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICAgICAgdGhpcy50aXRsZWJhci5hcHBlbmRDaGlsZChoZWFkZXIuY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgIHRoaXMubW9kYWxCb2R5LmFwcGVuZENoaWxkKGJvZHkuY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvb3Rlcikge1xuICAgICAgICAgICAgdGhpcy5tb2RhbEZvb3Rlci5hcHBlbmRDaGlsZChmb290ZXIuY29udGVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnJlc2l6YWJsZURpcmVjdGl2ZS5hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmNlbnRlcigpO1xuICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubW9kYWxSb290LmZvY3VzKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zY3JvbGxUb3BFbmFibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsQm9keS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxKTtcbiAgICAgICAgdGhpcy5zZXREaWFsb2dTdHlsZXMoKTtcbiAgICB9XG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnJlc2l6YWJsZURpcmVjdGl2ZS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdjbG9zZU1vZGFsJykpO1xuICAgICAgICB0aGlzLmZvY3VzTGFzdE1vZGFsKCk7XG4gICAgICAgIHRoaXMuc2V0RGlhbG9nU3R5bGVzKCk7XG4gICAgfVxuICAgIGNlbnRlcigpIHtcbiAgICAgICAgbGV0IGVsZW1lbnRXaWR0aCA9IHRoaXMubW9kYWxSb290Lm9mZnNldFdpZHRoO1xuICAgICAgICBsZXQgZWxlbWVudEhlaWdodCA9IHRoaXMubW9kYWxSb290Lm9mZnNldEhlaWdodDtcbiAgICAgICAgaWYgKGVsZW1lbnRXaWR0aCA9PT0gMCAmJiBlbGVtZW50SGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGFsUm9vdC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICB0aGlzLm1vZGFsUm9vdC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIGVsZW1lbnRXaWR0aCA9IHRoaXMubW9kYWxSb290Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgZWxlbWVudEhlaWdodCA9IHRoaXMubW9kYWxSb290Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMubW9kYWxSb290LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB0aGlzLm1vZGFsUm9vdC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHggPSBNYXRoLm1heCgod2luZG93LmlubmVyV2lkdGggLSBlbGVtZW50V2lkdGgpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IHkgPSBNYXRoLm1heCgod2luZG93LmlubmVySGVpZ2h0IC0gZWxlbWVudEhlaWdodCkgLyAyLCAwKTtcbiAgICAgICAgdGhpcy5tb2RhbFJvb3Quc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgICB0aGlzLm1vZGFsUm9vdC5zdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICB9XG4gICAgaW5pdERyYWcoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcy5jbG9zZUljb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMubWF4aW1pemVkKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdnYWJsZURpcmVjdGl2ZS5zdGFydChldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25SZXNpemUoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsY0JvZHlIZWlnaHQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYWxjQm9keUhlaWdodCgpIHtcbiAgICAgICAgY29uc3QgZGlmZkhlaWdodCA9IHRoaXMubW9kYWxIZWFkZXIub2Zmc2V0SGVpZ2h0ICsgdGhpcy5tb2RhbEZvb3Rlci5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSB0aGlzLm1vZGFsUm9vdC5vZmZzZXRIZWlnaHQgLSBkaWZmSGVpZ2h0O1xuICAgICAgICB0aGlzLm1vZGFsQm9keS5zdHlsZS5oZWlnaHQgPSBjb250ZW50SGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgdGhpcy5tb2RhbEJvZHkuc3R5bGUubWF4SGVpZ2h0ID0gJ25vbmUnO1xuICAgIH1cbiAgICBnZXRNYXhNb2RhbEluZGV4KCkge1xuICAgICAgICByZXR1cm4gbWF4WkluZGV4KCcudWktbW9kYWwnKTtcbiAgICB9XG4gICAgZm9jdXNMYXN0TW9kYWwoKSB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gdGhpcy5wYXJlbnRFbGVtZW50LmNsb3Nlc3QoJy51aS1tb2RhbCcpO1xuICAgICAgICBpZiAobW9kYWwpIHtcbiAgICAgICAgICAgIG1vZGFsLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9nZ2xlTWF4aW1pemUoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMubWF4aW1pemVkKSB7XG4gICAgICAgICAgICB0aGlzLnJldmVydE1heGltaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1heGltaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zZXRNYXhpbWl6ZUljb25TdHlsZXMoKTtcbiAgICB9XG4gICAgbWF4aW1pemUoKSB7XG4gICAgICAgIHRoaXMucHJlTWF4aW1pemVQYWdlWCA9IHBhcnNlRmxvYXQodGhpcy5tb2RhbFJvb3Quc3R5bGUudG9wKTtcbiAgICAgICAgdGhpcy5wcmVNYXhpbWl6ZVBhZ2VZID0gcGFyc2VGbG9hdCh0aGlzLm1vZGFsUm9vdC5zdHlsZS5sZWZ0KTtcbiAgICAgICAgdGhpcy5wcmVNYXhpbWl6ZVJvb3RXaWR0aCA9IHRoaXMubW9kYWxSb290Lm9mZnNldFdpZHRoO1xuICAgICAgICB0aGlzLnByZU1heGltaXplUm9vdEhlaWdodCA9IHRoaXMubW9kYWxSb290Lm9mZnNldEhlaWdodDtcbiAgICAgICAgdGhpcy5wcmVNYXhpbWl6ZUJvZHlIZWlnaHQgPSB0aGlzLm1vZGFsQm9keS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHRoaXMubW9kYWxSb290LnN0eWxlLnRvcCA9ICcwcHgnO1xuICAgICAgICB0aGlzLm1vZGFsUm9vdC5zdHlsZS5sZWZ0ID0gJzBweCc7XG4gICAgICAgIHRoaXMubW9kYWxSb290LnN0eWxlLndpZHRoID0gJzEwMHZ3JztcbiAgICAgICAgdGhpcy5tb2RhbFJvb3Quc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcbiAgICAgICAgY29uc3QgZGlmZkhlaWdodCA9IHRoaXMubW9kYWxIZWFkZXIub2Zmc2V0SGVpZ2h0ICsgdGhpcy5tb2RhbEZvb3Rlci5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHRoaXMubW9kYWxCb2R5LnN0eWxlLmhlaWdodCA9ICdjYWxjKDEwMHZoIC0gJyArIGRpZmZIZWlnaHQgKyAncHgpJztcbiAgICAgICAgdGhpcy5tb2RhbEJvZHkuc3R5bGUubWF4SGVpZ2h0ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLm1heGltaXplZCA9IHRydWU7XG4gICAgfVxuICAgIHJldmVydE1heGltaXplKCkge1xuICAgICAgICB0aGlzLm1vZGFsUm9vdC5zdHlsZS50b3AgPSB0aGlzLnByZU1heGltaXplUGFnZVggKyAncHgnO1xuICAgICAgICB0aGlzLm1vZGFsUm9vdC5zdHlsZS5sZWZ0ID0gdGhpcy5wcmVNYXhpbWl6ZVBhZ2VZICsgJ3B4JztcbiAgICAgICAgdGhpcy5tb2RhbFJvb3Quc3R5bGUud2lkdGggPSB0aGlzLnByZU1heGltaXplUm9vdFdpZHRoICsgJ3B4JztcbiAgICAgICAgdGhpcy5tb2RhbFJvb3Quc3R5bGUuaGVpZ2h0ID0gdGhpcy5wcmVNYXhpbWl6ZVJvb3RIZWlnaHQgKyAncHgnO1xuICAgICAgICB0aGlzLm1vZGFsQm9keS5zdHlsZS5oZWlnaHQgPSB0aGlzLnByZU1heGltaXplQm9keUhlaWdodCArICdweCc7XG4gICAgICAgIHRoaXMubWF4aW1pemVkID0gZmFsc2U7XG4gICAgfVxuICAgIG1vdmVPblRvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJhY2tkcm9wKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhNb2RhbEluZGV4ID0gdGhpcy5nZXRNYXhNb2RhbEluZGV4KCk7XG4gICAgICAgICAgICBsZXQgekluZGV4ID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm1vZGFsUm9vdCkuekluZGV4KSB8fCAwO1xuICAgICAgICAgICAgaWYgKHpJbmRleCA8PSBtYXhNb2RhbEluZGV4KSB7XG4gICAgICAgICAgICAgICAgekluZGV4ID0gbWF4TW9kYWxJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbFJvb3Quc3R5bGUuekluZGV4ID0gekluZGV4LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0RGlhbG9nU3R5bGVzKCkge1xuICAgICAgICB0aGlzLm1vZGFsUm9vdC5zdHlsZS5kaXNwbGF5ID0gdGhpcy52aXNpYmxlID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgICAgICAgdGhpcy5tb2RhbE92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICh0aGlzLnZpc2libGUgJiYgdGhpcy5iYWNrZHJvcCkgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgIH1cbiAgICBzZXRNYXhpbWl6ZUljb25TdHlsZXMoKSB7XG4gICAgICAgIHRoaXMubWF4aW1pemVJY29uLnN0eWxlLmRpc3BsYXkgPSB0aGlzLm1heGltaXphYmxlID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgICAgICAgY29uc3QgY2xzID0gdGhpcy5tYXhpbWl6ZWQgPyAnZHQtaWNvbi1ub3JtYWxpemUnIDogJ2R0LWljb24tbWF4aW1pemUnO1xuICAgICAgICB0aGlzLm1heGltaXplSWNvbi5jbGFzc05hbWUgPSAndWktaWNvbiAnICsgY2xzO1xuICAgIH1cbiAgICBvbkNsb3NlSWNvbkNsaWNrKCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gICAgb25LZXlEb3duKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXkgPT0gJ0VzY2FwZScpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uV2luZG93UmVzaXplKCkge1xuICAgICAgICB0aGlzLmNlbnRlcigpO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnd2ViLW1vZGFsJywgTW9kYWxDb21wb25lbnQpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kYWwuY29tcG9uZW50LmpzLm1hcCIsImltcG9ydCAnLi9zdHlsZXMvYXBwLmNzcyc7XG5pbXBvcnQgJy4vc3R5bGVzL2FsbC5jc3MnO1xuaW1wb3J0ICdAbWF6ZGlrLWxpYi9tb2RhbCc7XG5cbmFzeW5jIGZ1bmN0aW9uIHNldFBhZ2UobWFpbjogSFRNTEVsZW1lbnQsIG5hbWU6IHN0cmluZywgdGl0bGU6IHN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IG1vZHVsZSA9IGF3YWl0IGltcG9ydChgLi9wYWdlcy8ke25hbWV9LnRzYCk7XG4gICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIGAke3RpdGxlfWAsIGAvIyR7bmFtZX1gKTtcbiAgICBtYWluLmlubmVySFRNTCA9IG1vZHVsZS5kZWZhdWx0O1xuICAgIG1vZHVsZS5wYWdlKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbWFpbi50ZXh0Q29udGVudCA9IGVycm9yLm1lc3NhZ2U7XG4gIH1cbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgY29uc3QgbWFpbjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJyk7XG4gIGNvbnN0IGxpbmtzOiBIVE1MRWxlbWVudFtdID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2lkZW5hdiA+IGEnKSk7XG5cbiAgc2V0UGFnZShtYWluLCBsb2NhdGlvbi5oYXNoLnNsaWNlKDEpIHx8ICdtb2RhbC1iYXNpYycsICcnKTtcblxuICBsaW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2V0UGFnZShtYWluLCBsaW5rLmRhdGFzZXQuY2h1bmssIGxpbmsuaW5uZXJUZXh0KTtcbiAgICAgIH0pO1xuICB9KTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9