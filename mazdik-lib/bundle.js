!function(e){function t(t){for(var i,n,o=t[0],a=t[1],r=0,d=[];r<o.length;r++)n=o[r],Object.prototype.hasOwnProperty.call(s,n)&&s[n]&&d.push(s[n][0]),s[n]=0;for(i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i]);for(h&&h(t);d.length;)d.shift()()}var i={},s={0:0};function n(t){if(i[t])return i[t].exports;var s=i[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.e=function(e){var t=[],i=s[e];if(0!==i)if(i)t.push(i[2]);else{var o=new Promise((function(t,n){i=s[e]=[t,n]}));t.push(i[2]=o);var a,r=document.createElement("script");r.charset="utf-8",r.timeout=120,n.nc&&r.setAttribute("nonce",n.nc),r.src=function(e){return n.p+""+e+".bundle.js"}(e);var h=new Error;a=function(t){r.onerror=r.onload=null,clearTimeout(d);var i=s[e];if(0!==i){if(i){var n=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;h.message="Loading chunk "+e+" failed.\n("+n+": "+o+")",h.name="ChunkLoadError",h.type=n,h.request=o,i[1](h)}s[e]=void 0}};var d=setTimeout((function(){a({type:"timeout",target:r})}),12e4);r.onerror=r.onload=a,document.head.appendChild(r)}return Promise.all(t)},n.m=e,n.c=i,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n.oe=function(e){throw console.error(e),e};var o=window.webpackJsonp=window.webpackJsonp||[],a=o.push.bind(o);o.push=t,o=o.slice();for(var r=0;r<o.length;r++)t(o[r]);var h=a;n(n.s=7)}([function(e,t,i){"use strict";function s(e){return null==e||("string"==typeof e&&0===e.trim().length||e instanceof Array&&0===e.length||0===Object.keys(e).length&&e.constructor===Object)}function n(e,t,i){(t=a(t,e.length-1))!==(i=a(i,e.length-1))&&e.splice(i,0,e.splice(t,1)[0])}function o(e,t,i,s){i=a(i,e.length-1),s=a(s,t.length),e.length&&t.splice(s,0,e.splice(i,1)[0])}function a(e,t){return Math.max(0,Math.min(e,t))}function r(e,t){if(t){const s=t instanceof Date?(i=t,new Date(i.getTime()-6e4*i.getTimezoneOffset()).toISOString()):t;if("datetime-local"===e)return s.slice(0,16);if("date"===e)return s.slice(0,10);if("month"===e)return s.slice(0,7)}var i;return t}function h(e){return"date"===e||"datetime-local"===e||"month"===e}function d(e){return!(!e||"000"===e.substring(0,3)||"00"===e.substring(0,2)||"0"===e.substring(0,1))}function l(e){return"touchstart"===e.type||"mousedown"===e.type&&0===e.button}function c(e){return"touchend"===e.type||"touchcancel"===e.type?e.changedTouches[0]:e.type.startsWith("touch")?e.targetTouches[0]:e}function m(e="body *"){return Array.from(document.querySelectorAll(e)).map(e=>parseFloat(window.getComputedStyle(e).zIndex)).filter(e=>!isNaN(e)).sort((e,t)=>e-t).pop()||0}var u;!function(e){e[e.BACKSPACE=8]="BACKSPACE",e[e.TAB=9]="TAB",e[e.ENTER=13]="ENTER",e[e.ESCAPE=27]="ESCAPE",e[e.SPACE=32]="SPACE",e[e.LEFT=37]="LEFT",e[e.UP=38]="UP",e[e.RIGHT=39]="RIGHT",e[e.DOWN=40]="DOWN",e[e.DELETE=46]="DELETE",e[e.KEY_F2=113]="KEY_F2"}(u||(u={})),i.d(t,"h",(function(){return s})),i.d(t,"b",(function(){return n})),i.d(t,"c",(function(){return o})),i.d(t,"f",(function(){return r})),i.d(t,"g",(function(){return h})),i.d(t,"d",(function(){return d})),i.d(t,"i",(function(){return l})),i.d(t,"e",(function(){return c})),i.d(t,"j",(function(){return m})),i.d(t,"a",(function(){return u}))},function(e,t,i){"use strict";var s=i(0);class n{constructor(e,t=!0,i=!0){this.element=e,this.dragX=t,this.dragY=i,this.globalListeners=new Map}start(e){this.onMousedown(e)}destroy(){this.removeEventListeners()}onMousedown(e){if(Object(s.i)(e)&&(this.dragX||this.dragY)){const t=Object(s.e)(e);this.initDrag(t.pageX,t.pageY),this.addEventListeners(e),this.element.dispatchEvent(new CustomEvent("dragStart",{detail:e}))}}onMousemove(e){const t=Object(s.e)(e);this.onDrag(t.pageX,t.pageY),this.element.dispatchEvent(new CustomEvent("dragMove",{detail:e}))}onMouseup(e){this.endDrag(),this.removeEventListeners(),this.element.dispatchEvent(new CustomEvent("dragEnd",{detail:e}))}addEventListeners(e){const t=e.type.startsWith("touch"),i=t?"touchmove":"mousemove",s=t?"touchend":"mouseup";this.globalListeners.set(i,{handler:this.onMousemove.bind(this),options:!1}).set(s,{handler:this.onMouseup.bind(this),options:!1}),this.globalListeners.forEach((e,t)=>{window.document.addEventListener(t,e.handler,e.options)})}removeEventListeners(){this.globalListeners.forEach((e,t)=>{window.document.removeEventListener(t,e.handler,e.options)})}initDrag(e,t){this.isDragging=!0,this.lastPageX=e,this.lastPageY=t,this.element.classList.add("dragging")}onDrag(e,t){if(this.isDragging){const i=e-this.lastPageX,s=t-this.lastPageY,n=this.element.getBoundingClientRect();this.element.style.left=n.left+i+"px",this.element.style.top=n.top+s+"px",this.lastPageX=e,this.lastPageY=t}}endDrag(){this.isDragging=!1,this.element.classList.remove("dragging")}}i.d(t,"a",(function(){return n}))},function(e,t,i){"use strict";var s=i(0);class n{constructor(e,t=!0,i=!0,s=!0,n=!1){this.element=e,this.south=t,this.east=i,this.southEast=s,this.ghost=n,this.startListeners=new Map,this.globalListeners=new Map,this.viewInit()}viewInit(){this.south&&this.createHandle("resize-handle-s"),this.east&&this.createHandle("resize-handle-e"),this.southEast&&this.createHandle("resize-handle-se");const e=window.getComputedStyle(this.element);this.minWidth=parseFloat(e.minWidth),this.maxWidth=parseFloat(e.maxWidth),this.minHeight=parseFloat(e.minHeight),this.maxHeight=parseFloat(e.maxHeight)}destroy(){this.removeEventListeners()}addEventListeners(){this.startListeners.set("mousedown",{handler:this.onMousedown.bind(this),options:!1}).set("touchstart",{handler:this.onMousedown.bind(this),options:!1}),this.startListeners.forEach((e,t)=>{this.element.addEventListener(t,e.handler,e.options)})}removeEventListeners(){this.startListeners.forEach((e,t)=>{this.element.removeEventListener(t,e.handler,e.options)})}onMousedown(e){if(!Object(s.i)(e))return;const t=e.target.classList,i=t.contains("resize-handle-s"),n=t.contains("resize-handle-e"),o=t.contains("resize-handle-se"),a=Object(s.e)(e),r=this.element.clientWidth,h=this.element.clientHeight,d=a.screenX,l=a.screenY,c=e.type.startsWith("touch"),m=c?"touchmove":"mousemove",u=c?"touchend":"mouseup";(i||n||o)&&(this.initResize(e,i,n,o),this.globalListeners.set(m,{handler:this.onMove.bind(this,r,h,d,l),options:!1}).set(u,{handler:this.onMouseup.bind(this),options:!1}),this.globalListeners.forEach((e,t)=>{window.document.addEventListener(t,e.handler,e.options)}))}onMove(e,t,i,n,o){const a=Object(s.e)(o),r=a.screenX-i,h=a.screenY-n;this.newWidth=e+r,this.newHeight=t+h,this.resizeWidth(a),this.resizeHeight(a)}onMouseup(e){this.endResize(e),this.globalListeners.forEach((e,t)=>{window.document.removeEventListener(t,e.handler,e.options)})}createHandle(e){const t=document.createElement("span");t.className=e,this.element.appendChild(t)}initResize(e,t,i,s){t&&(this.resizingS=!0),i&&(this.resizingE=!0),s&&(this.resizingSE=!0),this.element.classList.add("resizing"),this.newWidth=this.element.clientWidth,this.newHeight=this.element.clientHeight,e.stopPropagation(),this.element.dispatchEvent(new CustomEvent("resizeBegin"))}endResize(e){this.resizingS=!1,this.resizingE=!1,this.resizingSE=!1,this.element.classList.remove("resizing");const t={event:Object(s.e)(e),width:this.newWidth,height:this.newHeight};this.element.dispatchEvent(new CustomEvent("resizeEnd",{detail:t}))}resizeWidth(e){const t=!this.minWidth||this.newWidth>=this.minWidth,i=!this.maxWidth||this.newWidth<=this.maxWidth;if((this.resizingSE||this.resizingE)&&t&&i){this.ghost||(this.element.style.width=`${this.newWidth}px`);const t={event:e,width:this.newWidth,height:this.newHeight,direction:"horizontal"};this.element.dispatchEvent(new CustomEvent("resizing",{detail:t}))}}resizeHeight(e){const t=!this.minHeight||this.newHeight>=this.minHeight,i=!this.maxHeight||this.newHeight<=this.maxHeight;if((this.resizingSE||this.resizingS)&&t&&i){this.ghost||(this.element.style.height=`${this.newHeight}px`);const t={event:e,width:this.newWidth,height:this.newHeight,direction:"vertical"};this.element.dispatchEvent(new CustomEvent("resizing",{detail:t}))}}}i.d(t,"a",(function(){return n}))},function(e,t,i){"use strict";var s,n=i(0);class o{constructor(e,t,i){this.tree=i,this.id=e.id,this.name=e.name,this.data=e.data,this.icon=e.icon,this.expanded=e.expanded,this.leaf=e.leaf,this.parent=t,this.$$id=this.tree.generateId(),this.$$level=t?t.$$level+1:0,this.children=e.children}get children(){return this._children}set children(e){this._children=[],e&&(this._children=e.map(e=>new o(e,this,this.tree)))}get path(){return this.parent?[...this.parent.path,this.id]:[]}get hasChildren(){return this.children&&this.children.length>0}get isSelected(){return this===this.tree.selectedNode}setSelected(){this.tree.selectedNode=this}isLeaf(){return!1!==this.leaf&&!this.hasChildren}ensureVisible(){return this.parent&&(this.parent.expanded=!0,this.parent.ensureVisible()),this}}!function(e){e[e.FOUND=0]="FOUND",e[e.ON_FOUND_PATH=1]="ON_FOUND_PATH",e[e.NOT_FOUND=2]="NOT_FOUND"}(s||(s={}));class a{constructor(){this.uidNode=0}get nodes(){return this._nodes}set nodes(e){this._nodes=[];for(const t of e)this._nodes.push(new o(t,null,this))}generateId(){return this.uidNode++}initLoadNodes(){return!this.service||this.nodes&&this.nodes.length?Promise.resolve():this.service.getNodes().then(e=>{this.nodes=e})}loadNode(e){return e.children&&0!==e.children.length||!1!==e.leaf?Promise.resolve():this.service?this.service.getNodes(e).then(t=>{this.addNode(e.$$id,t)}):void 0}addNode(e,t){this.nodes.forEach(i=>{this._addNode(i,e,t)})}_addNode(e,t,i){if(e.$$id===t)return e.children=i,!0;e.children&&e.children.forEach(e=>{this._addNode(e,t,i)})}doForAll(e){this.doForEach(this.nodes,e).then()}filterTree(e){this.serverSideFiltering?this.filterServerSide(e):this.filterClientSide(e)}filterClientSide(e){if(!e.trim())return void this.clearSearchState();const t=i=>{let n=!1;if(i.name.toLowerCase().indexOf(e.toLowerCase())>=0?(i.$$filterState=s.FOUND,n=!0):(i.$$filterState=s.NOT_FOUND,i.expanded=!1,n=!1),i.children){i.children.map(t).find(e=>e)&&(i.$$filterState!==s.FOUND&&(i.$$filterState=s.ON_FOUND_PATH),i.expanded=!0,n=!0)}return n};this.nodes&&this.nodes.forEach(t)}clearSearchState(){this.doForAll(e=>{e.$$filterState=null,e.expanded=!1})}getNodeById(e){return this.getNodeBy(t=>t.id&&t.id.toString()===e.toString())}getNodeBy(e,t=null){if(!(t=t||{children:this.nodes}).children)return null;const i=t.children.find(e);if(i)return i;for(const i of t.children){const t=this.getNodeBy(e,i);if(t)return t}}getChildren(e){return e.children&&0!==e.children.length||!1!==e.leaf?Promise.resolve():this.service.getNodes(e).then(t=>{e.children=t})}doForEach(e,t){return Promise.all(e.map(e=>Promise.resolve(t(e)).then(()=>{if(e.children)return this.doForEach(e.children,t)}),this))}expandAll(){this.doForEach(this.nodes,e=>(e.expanded=!0,this.getChildren(e))).then()}collapseAll(){this.doForEach(this.nodes,e=>{e.expanded=!1}).then()}loadPath(e){return e&&e.length?Promise.all(e.map(e=>this.doForEach(this.nodes,t=>{if(t.id===e)return this.getChildren(t)}),this)).then(()=>(e.shift(),this.loadPath(e))):Promise.resolve()}filterServerSide(e){Object(n.h)(e)?this.clearSearchState():this.service&&(this.filterLoading=!0,this.service.searchNodes(e).then(t=>{this.loadPath(t).then(()=>{this.filterClientSide(e),this.filterLoading=!1})}))}}function r(e,t){e?(t.classList.add("expanded"),t.classList.remove("collapsed")):(t.classList.remove("expanded"),t.classList.add("collapsed"))}class h{constructor(e){this.node=e,this.element=this.createNavItemElement(e)}getTemplate(e,t,i){return`${t?`<i class="${t}"></i>`:""}<span class="menu-item-text">${e}</span>${i?'<div class="rotating-icon">\n      <svg focusable="false" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n        <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z" />\n      </svg>\n    </div>':""}`}createNavItemElement(e){const t=e.icon?"nav-menu-icon "+e.icon:"",i=document.createElement("a");return i.innerHTML=this.getTemplate(e.name,t,e.hasChildren),i.dataset.id=e.$$id.toString(),i.classList.add("vertical-menu-item"),i.classList.add("level-"+(this.node.$$level+1)),this.updateNavItemStyles(e,i),i}updateNavItemStyles(e,t){e.isSelected?t.classList.add("active"):t.classList.remove("active"),e.hasChildren,t.classList.add("heading"),r(e.expanded,t)}updateStyles(){this.updateNavItemStyles(this.node,this.element);const e=this.element.nextElementSibling;e&&r(this.node.expanded,e)}onClick(){this.node.hasChildren?this.node.expanded=!this.node.expanded:this.node.setSelected(),this.updateStyles()}}class d extends HTMLElement{constructor(){super(),this.tree=new a,this.collapsed=!0,this.listeners=[],this.navItems=[],this.classList.add("nav-menu"),this.addEventListeners()}get nodes(){return this.tree.nodes}set nodes(e){this.tree.nodes=e,this.render(),this.updateStyles()}disconnectedCallback(){this.removeEventListeners()}addEventListeners(){this.listeners=[{eventName:"mouseenter",target:this,handler:this.onMouseEnter.bind(this)},{eventName:"mouseleave",target:this,handler:this.onMouseLeave.bind(this)},{eventName:"click",target:this,handler:this.onClick.bind(this)}],this.listeners.forEach(e=>{e.target.addEventListener(e.eventName,e.handler)})}removeEventListeners(){this.listeners.forEach(e=>{e.target.removeEventListener(e.eventName,e.handler)})}updateStyles(){this.minimize?this.collapsed?(this.classList.add("nav-collapsed"),this.classList.remove("nav-expanded")):(this.classList.remove("nav-collapsed"),this.classList.add("nav-expanded")):this.classList.add("nav-expanded")}onMouseEnter(){this.collapsed=!1,this.updateStyles()}onMouseLeave(){this.collapsed=!0,this.updateStyles()}render(){const e=document.createDocumentFragment();this.nodes.forEach(t=>{const i=this.createTreeDom(t);e.appendChild(i)}),this.appendChild(e)}createTreeDom(e){const t=document.createElement("div");t.classList.add("nav-item");const i=new h(e);if(this.navItems.push(i),t.appendChild(i.element),e.hasChildren){const i=document.createElement("div");i.classList.add("heading-children"),t.appendChild(i),r(e.expanded,i),e.children.forEach(e=>{const t=this.createTreeDom(e);i.appendChild(t)})}return t}onClick(e){const t=e.target,i="A"===t.tagName?t:t.closest("a");if(i&&!Object(n.h)(i.dataset.id)){e.stopPropagation();const t=this.navItems.find(e=>e.node.$$id.toString()===i.dataset.id);t.onClick(),this.updateAllItemsStyles(),Object(n.h)(t.node.id)||this.dispatchEvent(new CustomEvent("linkClicked",{detail:t.node}))}}updateAllItemsStyles(){this.navItems.forEach(e=>e.updateStyles())}ensureVisible(e){const t=this.tree.getNodeById(e);t&&(t.ensureVisible(),t.setSelected()),this.updateAllItemsStyles()}}customElements.define("web-nav-menu",d)},function(e,t,i){},function(e,t,i){},function(e,t,i){var s={"./context-menu.ts":[18,2],"./drag-drop.ts":[16,5],"./draggable.ts":[8,6],"./dropdown-select.ts":[17,1],"./dropdown.ts":[9,3],"./inline-edit.ts":[19,7],"./modal-basic.ts":[10,8],"./modal-nested.ts":[11,9],"./modal-panels.ts":[12,10],"./nav-menu.ts":[13,11],"./resizable.ts":[14,12],"./select-list.ts":[15,4]};function n(e){if(!i.o(s,e))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=s[e],n=t[0];return i.e(t[1]).then((function(){return i(n)}))}n.keys=function(){return Object.keys(s)},n.id=6,e.exports=n},function(e,t,i){"use strict";i.r(t);i(4),i(5);var s=i(0),n=i(1),o=i(2);class a extends HTMLElement{constructor(){super(),this.scrollTopEnable=!0,this.maximizable=!0,this.backdrop=!0,this.listeners=[];const e=document.createElement("template");e.innerHTML='\n  <div class="ui-modal-overlay" id="modalOverlay"></div>\n  <div class="ui-modal" tabindex="-1" role="dialog" id="modalRoot">\n    <div class="ui-modal-header" id="modalHeader">\n      <div class="ui-titlebar" id="titlebar">\n      </div>\n      <div class="ui-controlbar">\n        <i class="ui-icon" id="maximizeIcon"></i>\n        <i class="ui-icon dt-icon-close" id="closeIcon"></i>\n      </div>\n    </div>\n    <div class="ui-modal-body" id="modalBody"></div>\n    <div class="ui-modal-footer" id="modalFooter"></div>\n  </div>\n  ',this.appendChild(e.content.cloneNode(!0)),this.modalOverlay=this.querySelector("#modalOverlay"),this.modalRoot=this.querySelector("#modalRoot"),this.modalBody=this.querySelector("#modalBody"),this.modalHeader=this.querySelector("#modalHeader"),this.modalFooter=this.querySelector("#modalFooter"),this.maximizeIcon=this.querySelector("#maximizeIcon"),this.closeIcon=this.querySelector("#closeIcon"),this.titlebar=this.querySelector("#titlebar"),this.setDialogStyles(),this.setMaximizeIconStyles(),this.renderContent(),this.draggableDirective=new n.a(this.modalRoot),this.resizableDirective=new o.a(this.modalRoot)}get open(){return this.hasAttribute("open")}set open(e){e?this.setAttribute("open",""):this.removeAttribute("open")}disconnectedCallback(){this.removeEventListeners(),this.draggableDirective.destroy(),this.resizableDirective.destroy()}static get observedAttributes(){return["open"]}attributeChangedCallback(e,t,i){switch(e){case"open":this.open?this.show():this.hide()}}addEventListeners(){this.listeners=[{eventName:"click",target:this.closeIcon,handler:this.onCloseIconClick.bind(this)},{eventName:"click",target:this.maximizeIcon,handler:this.toggleMaximize.bind(this)},{eventName:"mousedown",target:this.modalHeader,handler:this.initDrag.bind(this)},{eventName:"touchstart",target:this.modalHeader,handler:this.initDrag.bind(this)},{eventName:"mousedown",target:this.modalRoot,handler:this.moveOnTop.bind(this)},{eventName:"touchstart",target:this.modalRoot,handler:this.moveOnTop.bind(this)},{eventName:"keydown",target:this,handler:this.onKeyDown.bind(this)},{eventName:"resizing",target:this.modalRoot,handler:this.onResize.bind(this)},{eventName:"resize",target:window,handler:this.onWindowResize.bind(this)}],this.listeners.forEach(e=>{e.target.addEventListener(e.eventName,e.handler)})}removeEventListeners(){this.listeners.forEach(e=>{e.target.removeEventListener(e.eventName,e.handler)})}renderContent(){const e=this.querySelector('[select="app-modal-header"]'),t=this.querySelector('[select="app-modal-body"]'),i=this.querySelector('[select="app-modal-footer"]');e&&this.titlebar.appendChild(e.content),t&&this.modalBody.appendChild(t.content),i&&this.modalFooter.appendChild(i.content)}show(){this.addEventListeners(),this.resizableDirective.addEventListeners(),this.center(),this.visible=!0,setTimeout(()=>{this.modalRoot.focus(),this.scrollTopEnable&&(this.modalBody.scrollTop=0)},1),this.setDialogStyles()}hide(){this.removeEventListeners(),this.resizableDirective.destroy(),this.visible=!1,this.dispatchEvent(new CustomEvent("closeModal")),this.focusLastModal(),this.setDialogStyles()}center(){let e=this.modalRoot.offsetWidth,t=this.modalRoot.offsetHeight;0===e&&0===t&&(this.modalRoot.style.visibility="hidden",this.modalRoot.style.display="block",e=this.modalRoot.offsetWidth,t=this.modalRoot.offsetHeight,this.modalRoot.style.display="none",this.modalRoot.style.visibility="visible");const i=Math.max((window.innerWidth-e)/2,0),s=Math.max((window.innerHeight-t)/2,0);this.modalRoot.style.left=i+"px",this.modalRoot.style.top=s+"px"}initDrag(e){e.target!==this.closeIcon&&(this.maximized||this.draggableDirective.start(e))}onResize(e){"vertical"===e.detail.direction&&this.calcBodyHeight()}calcBodyHeight(){const e=this.modalHeader.offsetHeight+this.modalFooter.offsetHeight,t=this.modalRoot.offsetHeight-e;this.modalBody.style.height=t+"px",this.modalBody.style.maxHeight="none"}getMaxModalIndex(){return Object(s.j)(".ui-modal")}focusLastModal(){const e=this.parentElement.closest(".ui-modal");e&&e.focus()}toggleMaximize(e){this.maximized?this.revertMaximize():this.maximize(),e.preventDefault(),this.setMaximizeIconStyles()}maximize(){this.preMaximizePageX=parseFloat(this.modalRoot.style.top),this.preMaximizePageY=parseFloat(this.modalRoot.style.left),this.preMaximizeRootWidth=this.modalRoot.offsetWidth,this.preMaximizeRootHeight=this.modalRoot.offsetHeight,this.preMaximizeBodyHeight=this.modalBody.offsetHeight,this.modalRoot.style.top="0px",this.modalRoot.style.left="0px",this.modalRoot.style.width="100vw",this.modalRoot.style.height="100vh";const e=this.modalHeader.offsetHeight+this.modalFooter.offsetHeight;this.modalBody.style.height="calc(100vh - "+e+"px)",this.modalBody.style.maxHeight="none",this.maximized=!0}revertMaximize(){this.modalRoot.style.top=this.preMaximizePageX+"px",this.modalRoot.style.left=this.preMaximizePageY+"px",this.modalRoot.style.width=this.preMaximizeRootWidth+"px",this.modalRoot.style.height=this.preMaximizeRootHeight+"px",this.modalBody.style.height=this.preMaximizeBodyHeight+"px",this.maximized=!1}moveOnTop(){if(!this.backdrop){const e=this.getMaxModalIndex();let t=parseFloat(window.getComputedStyle(this.modalRoot).zIndex)||0;t<=e&&(t=e+1,this.modalRoot.style.zIndex=t.toString())}}setDialogStyles(){this.modalRoot.style.display=this.visible?"block":"none",this.modalOverlay.style.display=this.visible&&this.backdrop?"block":"none"}setMaximizeIconStyles(){this.maximizeIcon.style.display=this.maximizable?"block":"none";const e=this.maximized?"dt-icon-normalize":"dt-icon-maximize";this.maximizeIcon.className="ui-icon "+e}onCloseIconClick(){this.hide()}onKeyDown(e){"Escape"==e.key&&(e.preventDefault(),e.stopPropagation(),this.hide())}onWindowResize(){this.center()}}customElements.define("web-modal",a);i(3);class r{constructor(){this.navbarExpand=!1,this.link="https://github.com/mazdik/mazdik-lib",this.mainNav=document.querySelector("#main-nav"),this.navbarToggle=document.querySelector("#navbar-toggle"),this.sourceLink=document.querySelector("#source-link"),this.githubIcon=document.querySelector("#github-icon"),this.sourceLink.href=this.link,this.githubIcon.href=this.link,this.navbarToggle.addEventListener("click",()=>{this.navbarExpand=!this.navbarExpand,this.updateStyles()})}set state(e){this.updateSourceLink(e)}updateStyles(){this.navbarExpand?this.mainNav.classList.add("navbar-expand"):this.mainNav.classList.remove("navbar-expand")}updateSourceLink(e){const t=this.link+"/blob/master/packages/web/src/pages/";this.sourceLink.href=e?t+e+".ts":t}}class h{constructor(){this.currentPage=null,this.indexPageTitle=document.title,this.header=new r,this.main=document.querySelector("main"),this.navMenu=document.querySelector("#nav-menu"),this.navMenu.nodes=this.getNavMenuNodes();const e=location.hash.slice(1)||"modal-basic";this.setPage(e,""),this.navMenu.ensureVisible(e),this.navMenu.addEventListener("linkClicked",e=>{this.destroy(this.currentPage),this.setPage(e.detail.id,e.detail.name)})}async setPage(e,t){try{const s=await i(6)(`./${e}.ts`);history.replaceState({},`${t}`,`/#${e}`),this.currentPage=new s.default,this.main.innerHTML=this.currentPage.template,this.currentPage.load(),document.title=t?t+" - "+this.indexPageTitle:this.indexPageTitle,this.header.state=e}catch(e){this.main.textContent=e.message}}destroy(e){e&&"function"==typeof e.onDestroy&&e.onDestroy()}getNavMenuNodes(){return[{name:"Modal",children:[{id:"modal-basic",name:"Basic modal"},{id:"modal-nested",name:"Nested modals"},{id:"modal-panels",name:"Panels"}]},{name:"Base",expanded:!0,children:[{id:"select-list",name:"Select list"},{id:"dropdown-select",name:"Dropdown select"},{id:"resizable",name:"Resizable"},{id:"draggable",name:"Draggable"},{id:"drag-drop",name:"Drag and drop"},{id:"context-menu",name:"Context menu"},{id:"dropdown",name:"Dropdown"},{id:"inline-edit",name:"Inline edit"},{id:"nav-menu",name:"Navigation menu"}]}]}}document.addEventListener("DOMContentLoaded",()=>{new h})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,