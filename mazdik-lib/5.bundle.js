(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{16:function(e,t,n){"use strict";n.r(t);var r=n(23),a=n.n(r);class s{constructor(e){this.element=e,this.listeners=[],this.addEventListeners()}addEventListeners(){this.listeners=[{eventName:"dragenter",target:this.element,handler:this.onDragEnter.bind(this)},{eventName:"dragover",target:this.element,handler:this.onDragOver.bind(this)},{eventName:"dragleave",target:this.element,handler:this.onDragLeave.bind(this)},{eventName:"drop",target:this.element,handler:this.onDrop.bind(this)}],this.listeners.forEach(e=>{e.target.addEventListener(e.eventName,e.handler)})}removeEventListeners(){this.listeners.forEach(e=>{e.target.removeEventListener(e.eventName,e.handler)})}onDragEnter(e){e.preventDefault()}onDragOver(e){e.preventDefault()}onDragLeave(e){e.preventDefault()}onDrop(e){e.preventDefault();const t=this.dragElementEvent.event.target.parentElement,n=Math.max(0,this.getNumberPosition(e.target));let r;r=t===this.element?{previousIndex:this.dragElementEvent.index,currentIndex:n,type:"reorder"}:{previousIndex:this.dragElementEvent.index,currentIndex:n,type:"move"},this.element.dispatchEvent(new CustomEvent("dropElement",{detail:r}))}getNumberPosition(e){const t=this.dragElementEvent.event.target.parentElement,n=this.element;if(e===t)return t.children?t.children.length:0;if(e===n)return n.children?n.children.length:0;let r=0;for(;e=e.previousSibling;)r++;return r-1}}var i=n(0);class o{constructor(e,t){this.droppables=[],this.listeners=[],e.forEach(e=>{this.droppables.push(new s(e)),this.listeners.push({eventName:"dropElement",target:e,handler:t=>{this.onDrop(t.detail,e)}})}),t.forEach((e,t)=>{e.dataset.index=t.toString(),e.draggable=!0,this.listeners.push({eventName:"dragstart",target:e,handler:this.onDragStart.bind(this)})}),this.listeners.forEach(e=>{e.target.addEventListener(e.eventName,e.handler)})}destroy(){this.removeEventListeners(),this.droppables.forEach(e=>{e.removeEventListeners()})}removeEventListeners(){this.listeners.forEach(e=>{e.target.removeEventListener(e.eventName,e.handler)})}onDragStart(e){const t=e.target.dataset.index;e.dataTransfer.setData("text",t),e.dataTransfer.effectAllowed="move";const n={event:e,index:parseInt(t,10)};this.droppables.forEach(e=>e.dragElementEvent=n),this.source=e.target.parentElement}onDrop(e,t){const n=Array.from(this.source.children),r=Array.from(t.children);"reorder"===e.type?(Object(i.b)(r,e.previousIndex,e.currentIndex),r.forEach((e,t)=>e.dataset.index=t.toString()),t.append(...r)):(Object(i.c)(n,r,e.previousIndex,e.currentIndex),n.forEach((e,t)=>e.dataset.index=t.toString()),r.forEach((e,t)=>e.dataset.index=t.toString()),this.source.append(...n),t.append(...r))}}n.d(t,"default",(function(){return d}));class d{get template(){return a.a}load(){const e=[[{name:"Task 1",text:"Write a program that prints ‘Hello World’ to the screen"},{name:"Task 2",text:"Write a program that asks the user for their name and greets them with their name"},{name:"Task 3",text:"Modify the previous program such that only the users Alice and Bob are greeted with their names"}],[{name:"Task 4",text:"Write a program that asks the user for a number n and prints the sum of the numbers 1 to n"},{name:"Task 5",text:"Modify the previous program such that only multiples of three or five are considered in the sum"},{name:"Task 6",text:"Write a program that prints a multiplication table for numbers up to 12"}],[{name:"Task 7",text:"Write a function that returns the largest element in a list"},{name:"Task 8",text:"Write function that reverses a list, preferably in place"},{name:"Task 9",text:"Write a function that checks whether an element occurs in a list"}],[{name:"Task 10",text:"Write a function that returns the elements on odd positions in a list"},{name:"Task 11",text:"Write a function that computes the running total of a list"},{name:"Task 12",text:"Write a function that tests whether a string is a palindrome"}],[{name:"Task 13",text:"Write a program that prints all prime numbers"},{name:"Task 14",text:"Write a guessing game where the user has to guess a secret number"},{name:"Task 15",text:"Write a program that prints the next 20 leap years"}]];const t=document.querySelector("#drag-drop-demo"),{columnElements:n,issueElements:r}=function(){const t=[];let n=[];return e.forEach(e=>{const r=document.createElement("div");r.className="dd-column";const a=function(e){const t=[];return e.forEach(e=>{const n=document.createElement("div");n.className="dd-issue";const r=document.createElement("div");r.className="dd-title",r.textContent=e.name,n.append(r);const a=document.createElement("div");a.className="dd-text",a.textContent=e.text,n.append(a),t.push(n)}),t}(e);r.append(...a),n=n.concat(a),t.push(r)}),{columnElements:t,issueElements:n}}();t.append(...n),this.dragDrop=new o(n,r)}onDestroy(){this.dragDrop.destroy()}}},23:function(e,t){e.exports='<div class="drag-drop-demo" id="drag-drop-demo"></div>\n'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,