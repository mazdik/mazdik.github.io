(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{18:function(e,t,n){"use strict";n.r(t);var s=n(22),i=n.n(s),o=n(20),d=n(0);class r extends HTMLElement{constructor(){super(),this._menu=[],this.listeners=[],this.listMenu=document.createElement("ul"),this.appendChild(this.listMenu),this.classList.add("dt-context-menu"),this.dropdown=new o.a(this),this.addEventListeners()}get menu(){return this._menu}set menu(e){this._menu=e,this.render()}disconnectedCallback(){this.dropdown.removeEventListeners(),this.listeners.forEach(e=>{e.target.removeEventListener(e.eventName,e.handler)})}addEventListeners(){this.listeners=[{eventName:"open",target:this,handler:this.onOpenChange.bind(this)},{eventName:"resize",target:window,handler:this.onWindowResize.bind(this)},{eventName:"click",target:this.listMenu,handler:this.onClickListMenu.bind(this)}],this.listeners.forEach(e=>{e.target.addEventListener(e.eventName,e.handler)})}onWindowResize(){this.dropdown.closeDropdown()}getPositionMenu(e,t){const{height:n,width:s}=this.getHiddenElementOuterSizes(this);return e+s-window.pageXOffset>window.innerWidth&&(e-=s),t+n-window.pageYOffset>window.innerHeight&&(t-=n),e<document.body.scrollLeft&&(e=document.body.scrollLeft),t<document.body.scrollTop&&(t=document.body.scrollTop),{left:e,top:t}}getHiddenElementOuterSizes(e){if(e.offsetParent)return{height:e.offsetHeight,width:e.offsetWidth};e.style.visibility="hidden",e.style.display="block";const t=e.offsetHeight,n=e.offsetWidth;return e.style.display="none",e.style.visibility="visible",{height:t,width:n}}show(e){let t;this.eventArgs=e,Object(d.h)(e.left)||Object(d.h)(e.top)?t=this.getPositionMenu(e.originalEvent.pageX+1,e.originalEvent.pageY+1):(t=this.getPositionMenu(e.left,e.top),this.dropdown.selectContainerClicked=!0),e.originalEvent.preventDefault(),this.top===t.top&&this.left===t.left?this.dropdown.toggleDropdown():(this.top=t.top,this.left=t.left,this.dropdown.closeDropdown(),this.dropdown.openDropdown())}hide(){this.dropdown.closeDropdown()}itemClick(e,t){t.disabled?e.preventDefault():(t.url||e.preventDefault(),t.command&&t.command(this.eventArgs.data),this.dropdown.closeDropdown())}updateStyles(){this.style.left=this.left+"px",this.style.top=this.top+"px",this.style.display=this.dropdown.isOpen&&this.menu.length>0?"block":"none"}onOpenChange(){this.updateStyles()}render(){const e=this.createListContent();this.listMenu.textContent="",this.listMenu.append(...e),this.updateStyles()}createListContent(){const e=[];return this.menu.forEach((t,n)=>{const s=document.createElement("li");t.disabled&&s.classList.add("disabled");const i=document.createElement("a");i.href=t.url||"#",i.textContent=t.label,i.dataset.id=n.toString(),s.append(i);const o=document.createElement("span");o.classList.add("context-menu-sep"),i.prepend(o);const d=document.createElement("i");t.icon&&d.classList.add(t.icon),i.prepend(d),e.push(s)}),e}getDataId(e){const t="A"===e.tagName?e:e.closest("a");return t&&t.dataset.id?t.dataset.id:null}onClickListMenu(e){const t=this.getDataId(e.target);if(null!=t){const n=parseInt(t,10);this.itemClick(e,this.menu[n])}}}customElements.define("web-context-menu",r),n.d(t,"default",(function(){return l}));class l{get template(){return i.a}load(){const e=[{label:"View Task",command:e=>console.log("View "+e)},{label:"Edit Task",command:e=>console.log("Edit "+e)},{label:"Delete Task",command:e=>console.log("Delete "+e),disabled:!0}],t=document.querySelector("#contextMenu");t.menu=e,document.querySelector("#button").addEventListener("click",e=>{!function(e){const n=e.target.offsetLeft+e.target.offsetWidth,s=e.target.offsetTop;t.show({originalEvent:e,data:"test",left:n,top:s})}(e)})}}},20:function(e,t,n){"use strict";var s=n(0);class i{constructor(e){this.element=e,this.addEventListeners()}addEventListeners(){this.clickListener=this.onClick.bind(this),this.element.addEventListener("click",this.clickListener),this.windowClickListener=this.onWindowClick.bind(this),window.document.addEventListener("click",this.windowClickListener),this.windowKeydownListener=this.onKeyDown.bind(this),window.document.addEventListener("keydown",this.windowKeydownListener)}removeEventListeners(){this.element.removeEventListener("click",this.clickListener),window.document.removeEventListener("click",this.windowClickListener),window.document.removeEventListener("keydown",this.windowKeydownListener)}onClick(){this.selectContainerClicked=!0}onWindowClick(){this.selectContainerClicked||this.closeDropdown(),this.selectContainerClicked=!1}onKeyDown(e){e.keyCode!==s.a.ESCAPE&&"Escape"!==e.key||this.closeDropdown()}toggleDropdown(){this.isOpen?this.closeDropdown():this.openDropdown()}openDropdown(){this.isOpen||(this.isOpen=!0,this.element.dispatchEvent(new CustomEvent("open",{detail:this.isOpen})))}closeDropdown(){this.isOpen&&(this.isOpen=!1,this.element.dispatchEvent(new CustomEvent("open",{detail:this.isOpen})))}}class o{constructor(e){this.element=e,this.isOpen=!1,this.listeners=[],this.addEventListeners()}set clickedElement(e){e!==this.element&&this.isOpen&&(this.isOpen=!1,this.updateStyles())}addEventListeners(){this.listeners=[{eventName:"click",target:this.element,handler:this.toggleDropdown.bind(this)}],this.listeners.forEach(e=>{e.target.addEventListener(e.eventName,e.handler)})}removeEventListeners(){this.listeners.forEach(e=>{e.target.removeEventListener(e.eventName,e.handler)})}toggle(){this.isOpen=!this.isOpen}toggleDropdown(e){e.stopPropagation(),this.toggle(),this.updateStyles(),this.element.dispatchEvent(new CustomEvent("clickElement",{detail:this.element}))}onWindowClick(e){const t=e.target;t&&(this.element.contains(t)||(this.isOpen=!1),this.updateStyles())}updateStyles(){this.isOpen?this.element.classList.add("open"):this.element.classList.remove("open")}}class d{constructor(e){this.dropdowns=[],this.listeners=[],e.forEach(e=>{this.dropdowns.push(new o(e))}),this.addEventListeners(e)}destroy(){this.removeEventListeners(),this.dropdowns.forEach(e=>{e.removeEventListeners()})}addEventListeners(e){this.listeners=[{eventName:"click",target:window,handler:this.onWindowClick.bind(this)}],e.forEach(e=>{this.listeners.push({eventName:"clickElement",target:e,handler:this.onClickElement.bind(this)})}),this.listeners.forEach(e=>{e.target.addEventListener(e.eventName,e.handler)})}removeEventListeners(){this.listeners.forEach(e=>{e.target.removeEventListener(e.eventName,e.handler)})}onWindowClick(e){this.dropdowns.forEach(t=>{t.onWindowClick(e)})}onClickElement(e){this.dropdowns.forEach(t=>{t.clickedElement=e.detail})}}n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return d}))},22:function(e,t){e.exports='<button class="dt-button" id="button">context menu</button>&nbsp;\n<web-context-menu id="contextMenu"></web-context-menu>\n'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,