(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{111:function(t,s,e){"use strict";var i=e(91);e.d(s,"VirtualScroller",(function(){return i.a}));e(87)},53:function(t,s,e){"use strict";e.r(s),e.d(s,"default",(function(){return o}));var i=e(111);class o{get template(){return'<div class="scroller-demo"><div class="scroller-demo-content"></div></div>'}load(){const t=Array.from({length:5e3}).map((t,s)=>{const e=document.createElement("div");return e.textContent="Item #"+(s+1),e}),s=document.querySelector(".scroller-demo"),e=document.querySelector(".scroller-demo-content"),o=document.createElement("div");o.classList.add("header"),o.textContent="Header",s.prepend(o);const r=new i.VirtualScroller(s,e,40,20);s.addEventListener("viewRowsChange",t=>{e.innerHTML="",e.append(...t.detail)}),r.items=t}}},87:function(t,s){},91:function(t,s,e){"use strict";e.d(s,"a",(function(){return r}));class i{constructor(){this.cache=[]}calcScrollLength(t){return this.cache[t-1]}initCache(t,s){const e=t.length;this.cache=new Array(e);for(let t=0;t<e;++t)this.cache[t]=0;t.forEach((t,i)=>{for(let o=i;o<e;o++)this.cache[o]+=t[s]})}calcRowIndex(t){if(0===t)return 0;let s=-1;const e=this.cache.length;for(let i=e;i>=0;i--){const o=s+i;o<e&&t>=this.cache[o]&&(t-=this.cache[o],s=o)}return s+1}getRowOffset(t){return t<0?0:this.cache[t]}}var o=e(0);class r{constructor(t,s,e,o=20,r){this.scrollElement=t,this.contentElement=s,this.rowHeight=e,this.itemsPerRow=o,this.rowHeightProp=r,this.appendHeight=0,this.scrollYPos=0,this.scrollXPos=0,this.prevScrollYPos=0,this.prevScrollXPos=0,this.rowHeightCache=new i,this.onInit()}get items(){return this._items}set items(t){this._items=t,this.initChunkRows()}destroy(){this.removeEventListeners()}removeEventListeners(){this.scrollElement.removeEventListener("scroll",this.scrollListener)}onInit(){this.scrollElement.classList.add("dt-virtual-scroll"),this.contentElement.classList.add("dt-scrollable-content"),this.paddingEl=document.createElement("div"),this.paddingEl.classList.add("dt-total-padding"),this.scrollElement.append(this.paddingEl),this.scrollListener=this.onScrolled.bind(this),this.scrollElement.addEventListener("scroll",this.scrollListener)}initChunkRows(){Object(o.isBlank)(this.items)||Object(o.isBlank)(this.rowHeight)||(this.resetPosition(),this.chunkRows(!0))}onScrolled(t){const s=t.currentTarget;this.scrollYPos=s.scrollTop,this.scrollXPos=s.scrollLeft;let e=null;if(this.scrollYPos<this.prevScrollYPos?e="up":this.scrollYPos>this.prevScrollYPos&&(e="down"),this.prevScrollYPos!==this.scrollYPos||this.prevScrollXPos!==this.scrollXPos){if(e){this.chunkRows();let t=this.rowHeight*this.start;this.rowHeightProp&&(t=this.rowHeightCache.getRowOffset(this.start-1)),requestAnimationFrame(()=>{this.contentElement.style.transform=`translateY(${t}px)`})}this.prevScrollYPos=this.scrollYPos,this.prevScrollXPos=this.scrollXPos;const t={direction:e,scrollYPos:this.scrollYPos,scrollXPos:this.scrollXPos};this.scrollElement.dispatchEvent(new CustomEvent("scrollChange",{detail:t}))}}setOffsetY(t){this.scrollElement.scrollTop=t}setPageOffsetY(t){const s=this.itemsPerRow*(t-1);let e=0;e=this.rowHeightProp?this.rowHeightCache.getRowOffset(s-1):this.rowHeight*s,this.setOffsetY(e)}calculateDimensions(){if(this.rowHeightProp&&this.rowHeightCache.initCache(this.items,this.rowHeightProp),this.items&&this.items.length){const t=this.items.length;this.rowHeightProp?this.scrollLength=this.rowHeightCache.calcScrollLength(t):this.scrollLength=this.rowHeight*t,this.paddingEl.style.height=this.scrollLength+"px"}let t=this.scrollElement.offsetHeight;t&&this.rowHeight?this.itemsPerRow=Math.round(t/this.rowHeight):(t=this.itemsPerRow*this.rowHeight+this.appendHeight,t>0&&(t-=this.rowHeight),this.scrollElement.style.height=t+"px")}chunkRows(t=!1){this.calculateDimensions();const s=this.items.length;if(this.rowHeightProp?this.start=this.rowHeightCache.calcRowIndex(this.scrollYPos):this.start=Math.floor(this.scrollYPos/this.rowHeight),this.end=Math.min(s,this.start+this.itemsPerRow),this.end-this.start<this.itemsPerRow&&(this.start=s-this.itemsPerRow,this.start=Math.max(this.start,0),this.end=s),this.start!==this.previousStart||this.end!==this.previousEnd||!0===t){const t=this.items.slice(this.start,this.end);this.previousStart=this.start,this.previousEnd=this.end,this.scrollElement.dispatchEvent(new CustomEvent("viewRowsChange",{detail:t}))}}resetPosition(){this.start=0,this.end=0,this.previousStart=0,this.previousEnd=0}calcPage(){return Math.ceil(this.start/this.itemsPerRow)+1}}}}]);