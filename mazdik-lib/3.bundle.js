(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{14:function(e,t,n){"use strict";n.r(t);var r=n(16),a=n.n(r);class s{constructor(e){this.element=e,this.listeners=[],this.addEventListeners()}addEventListeners(){this.listeners=[{eventName:"dragenter",target:this.element,handler:this.onDragEnter.bind(this)},{eventName:"dragover",target:this.element,handler:this.onDragOver.bind(this)},{eventName:"dragleave",target:this.element,handler:this.onDragLeave.bind(this)},{eventName:"drop",target:this.element,handler:this.onDrop.bind(this)}],this.listeners.forEach(e=>{e.target.addEventListener(e.eventName,e.handler)})}removeEventListeners(){this.listeners.forEach(e=>{e.target.removeEventListener(e.eventName,e.handler)})}onDragEnter(e){e.preventDefault()}onDragOver(e){e.preventDefault()}onDragLeave(e){e.preventDefault()}onDrop(e){e.preventDefault();const t=this.dragElementEvent.event.target.parentElement,n=Math.max(0,this.getNumberPosition(e.target));let r;r=t===this.element?{previousIndex:this.dragElementEvent.index,currentIndex:n,type:"reorder"}:{previousIndex:this.dragElementEvent.index,currentIndex:n,type:"move"},this.element.dispatchEvent(new CustomEvent("dropElement",{detail:r}))}getNumberPosition(e){const t=this.dragElementEvent.event.target.parentElement,n=this.element;if(e===t)return t.children?t.children.length:0;if(e===n)return n.children?n.children.length:0;let r=0;for(;e=e.previousSibling;)r++;return r-1}}var i=n(0);n.d(t,"page",(function(){return o}));t.default=a.a;function o(){const e=[[{name:"Task 1",text:"Write a program that prints ‘Hello World’ to the screen"},{name:"Task 2",text:"Write a program that asks the user for their name and greets them with their name"},{name:"Task 3",text:"Modify the previous program such that only the users Alice and Bob are greeted with their names"}],[{name:"Task 4",text:"Write a program that asks the user for a number n and prints the sum of the numbers 1 to n"},{name:"Task 5",text:"Modify the previous program such that only multiples of three or five are considered in the sum"},{name:"Task 6",text:"Write a program that prints a multiplication table for numbers up to 12"}],[{name:"Task 7",text:"Write a function that returns the largest element in a list"},{name:"Task 8",text:"Write function that reverses a list, preferably in place"},{name:"Task 9",text:"Write a function that checks whether an element occurs in a list"}],[{name:"Task 10",text:"Write a function that returns the elements on odd positions in a list"},{name:"Task 11",text:"Write a function that computes the running total of a list"},{name:"Task 12",text:"Write a function that tests whether a string is a palindrome"}],[{name:"Task 13",text:"Write a program that prints all prime numbers"},{name:"Task 14",text:"Write a guessing game where the user has to guess a secret number"},{name:"Task 15",text:"Write a program that prints the next 20 leap years"}]];let t;const n=[];function r(e){const r=[];return e.forEach((e,a)=>{const s=document.createElement("div");s.className="dd-issue",s.draggable=!0,s.dataset.index=a.toString(),s.addEventListener("dragstart",e=>{!function(e){const r=e.target.dataset.index;e.dataTransfer.setData("text",r),e.dataTransfer.effectAllowed="move";const a={event:e,index:parseInt(r,10)};n.forEach(e=>e.dragElementEvent=a),t=e.target.parentElement}(e)});const i=document.createElement("div");i.className="dd-title",i.textContent=e.name,s.append(i);const o=document.createElement("div");o.className="dd-text",o.textContent=e.text,s.append(o),r.push(s)}),r}document.querySelector("#drag-drop-demo").append(...function(){const a=[];return e.forEach(e=>{const o=document.createElement("div");o.className="dd-column",o.append(...r(e)),n.push(new s(o)),o.addEventListener("dropElement",e=>{!function(e,n){const r=Array.from(t.children),a=Array.from(n.children);"reorder"===e.type?(Object(i.b)(a,e.previousIndex,e.currentIndex),a.forEach((e,t)=>e.dataset.index=t.toString()),n.append(...a)):(Object(i.c)(r,a,e.previousIndex,e.currentIndex),r.forEach((e,t)=>e.dataset.index=t.toString()),a.forEach((e,t)=>e.dataset.index=t.toString()),t.append(...r),n.append(...a))}(e.detail,o)}),a.push(o)}),a}())}},16:function(e,t){e.exports='<div class="drag-drop-demo" id="drag-drop-demo"></div>\n'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,